# Assessment 3

```{r, include=FALSE}
library(tidyverse)
library(gt)
```

A project demonstrating data wrangling skills

## Instructions

Your task is to replicate [this html report](demos/report3_demo.html) using [these datasets](demos/report3_data.zip) and code, and to generate an appropriate visualisation for the final plot. Nearly identical to assessment 2, the submission must contain the following:

* [ ] A reproducible *project structure* with all needed files 
* [ ] Document structure and text that replicate the report 
* [ ] Import the data with correct data types 
* [ ] Plots that replicate Figure 1 
* [ ] A table that replicates Table 1 
* [ ] A plot that is appropriate to the description of Figure 2 
* [ ] Consistent plot themes, colours and labels 
* [ ] Cross-references in the text to the figures and table 
* [ ] References created using bibtex 

In addition, your code should demonstrate the following skills:

* [ ] Be able to match related data across multiple tables 
* [ ] Be able to reshape data between long and wide formats 
* [ ] Separate, change, reorder, and rename columns 
* [ ] Use pipes to chain together functions 
* [ ] Be able to select and filter data for relevance 
* [ ] Be able to create new columns and edit existing ones 

You should include two short reflections on two things you did to improve your code clarity and efficiency and why they are important.

## Hints and Tips

* The html theme used by the demo report is flatly
* The ggplot theme is `theme_bw()`
* You will not be asked to do anything 'tricky' in this assessment, so if you find yourself needing 20 lines of code just to customise the labels in a plot, try looking for more efficient alternatives.
* You will definitely need to join data, and convert between wide and long. Make sure you do this efficiently, creating the minimum number of extra data tables needed, and not re-creating the same table for different tasks.
* If you find yourself doing the same thing to many columns, you could probably do it more efficiently by reshaping the data longer first
* Use pipes to avoid creating many single-use tables.
* The figure width and height of Figure 1 are 10 and 5 (it is fine to change this if your fonts are a slightly different size)

## Submission

* Covers: chapters 1-7, emphasising 5-7
* Worth: 30%
* Do not put your name in your report; use your student ID as the author.
* Please submit a **zip file** containing: 
  1. the .rproj file
  2. your reproducible script, named `report3_studentID.qmd`
  3. any additional files necessary to reproduce your report(e.g., images or bibliography files),
  4. the rendered html report, named `report3_studentID.html`.

## Marking Rubric


```{r}
#| echo: false
rubric <- list(
  "Research & Knowledge" = list(
    "**Skills from Chapters 1-3**: You demonstrate skills to create reproducible reports and visualise data" = list(
      "A-Excellent" = "",
      "B-Very Good" = "",
      "C-Good" = "",
      "D-Satisfactory" = "",
      "E-Poor" = ""
    ),
    "**Data Import and Joining**: You import and join together data clearly and correctly" = list(
      "A-Excellent" = "",
      "B-Very Good" = "",
      "C-Good" = "",
      "D-Satisfactory" = "",
      "E-Poor" = ""
    ),
    "**Data Reshaping**: You can reshape data between long and wide formats where approriate" = list(
      "A-Excellent" = "",
      "B-Very Good" = "",
      "C-Good" = "",
      "D-Satisfactory" = "",
      "E-Poor" = ""
    ),
    "**Data Wrangling**: You demonstrate the ability to select and filter data, create new data columns, and edit existing data columns" = list(
      "A-Excellent" = "",
      "B-Very Good" = "",
      "C-Good" = "",
      "D-Satisfactory" = "",
      "E-Poor" = ""
    )
  ),
  "Evaluation" = list(
    "**Original Plot**: The original plot is appropriate to the question asked" = list(
      "A-Excellent" = "",
      "B-Very Good" = "",
      "C-Good" = "",
      "D-Satisfactory" = "",
      "E-Poor" = ""
    ),
    "**Reflection**: Your reflections note valid areas where code clarity and efficiency are important, and correctly identify and explain techniques you used to ensure them" = list(
      "A-Excellent" = "",
      "B-Very Good" = "",
      "C-Good" = "",
      "D-Satisfactory" = "",
      "E-Poor" = ""
    )
  ),
  "Communication" = list(
    "**Code Clarity**: Your code is organised in the quarto script cleanly and clearly, using separate code chunks to intersperse text and relevant code. Your code chunks contain comments that clarify the purpose of the code, but not overly-explaining each step. The names you use for objects are clear, consistent, and concise." = list(
      "A-Excellent" = "",
      "B-Very Good" = "",
      "C-Good" = "",
      "D-Satisfactory" = "",
      "E-Poor" = ""
    ),
    "**Code Efficiency**: While there are many ways to do the same things in R, some ways are more efficient than others. These avoid unnecessary code (e.g., do not load packages you do not use) and redundancy (e.g., do not load or process the data the same way in several places)." = list(
      "A-Excellent" = "",
      "B-Very Good" = "",
      "C-Good" = "",
      "D-Satisfactory" = "",
      "E-Poor" = ""
    )
  )
)
```

```{r}
#| echo: false
colnames <- c("ILO", 
              "A: Excellent", 
              "B: Very Good", 
              "C: Good", 
              "D: Satisfactory", 
              "E: Poor")
cats <- rep(names(rubric), sapply(rubric, length))

reduce(rubric, c) |>
  as_tibble() |>
  t() |>
  as_tibble(rownames = "ILO", .name_repair = "minimal") |>
  `names<-`(colnames) |>
  mutate(Category = cats) |>
  select(Category, everything()) |>
  group_by(Category) |>
  gt::gt() |>
  gt::fmt_markdown(columns = "ILO") |>
  gt::tab_style(style = list(gt::cell_text(align = "left", v_align= "top")),
                locations = cells_body()) |>
  gt::tab_style(style = list(gt::cell_fill("#4D9FCF66")),
                locations = cells_row_groups()) |>
  gt::tab_style(style = list(gt::cell_borders("bottom", "grey")),
                locations = cells_body()) |>
  gt::opt_stylize(style = 6, add_row_striping = FALSE)

```


