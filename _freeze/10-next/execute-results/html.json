{
  "hash": "62ff62e3b4d52ad97d1f5c9c0618ef53",
  "result": {
    "engine": "knitr",
    "markdown": "# Next Steps {#sec-next .incomplete-chapter}\n\n## Intended Learning Outcomes {#sec-ilo-next - .ilo}\n\n- [ ] Create and customise advanced types of plots\n- [ ] Structure data in report, presentation, and dashboard formats\n- [ ] Be aware of the ways to continue developing computational reproducibility skills\n\n## Visualisation {#sec-custom-viz}\n\n### Set-up {#setup-custom-viz}\n\n1. Open your `reprores` project \n1. Create a new quarto file called `10-viz.qmd`\n1. Update the YAML header \n1. Replace the setup chunk with the one below: \n\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#‎| label: setup\n#‎| include: false\n\n# packages needed for this chapter section\nlibrary(tidyverse)   # for data wrangling\nlibrary(ggthemes)    # for themes\n```\n````\n\n::: {.cell-output .cell-output-error}\n\n```\nError in library(ggthemes): there is no package called 'ggthemes'\n```\n\n\n:::\n\n````{.cell-code}\n```{{r}}\nlibrary(patchwork)   # for combining plots\nlibrary(plotly)      # for interactive plots\n```\n````\n\n::: {.cell-output .cell-output-error}\n\n```\nError in library(plotly): there is no package called 'plotly'\n```\n\n\n:::\n\n````{.cell-code}\n```{{r}}\n# devtools::install_github(\"hrbrmstr/waffle\")\nlibrary(waffle)      # for waffle plots\n```\n````\n\n::: {.cell-output .cell-output-error}\n\n```\nError in library(waffle): there is no package called 'waffle'\n```\n\n\n:::\n\n````{.cell-code}\n```{{r}}\nlibrary(ggbump)      # for bump plots\n```\n````\n\n::: {.cell-output .cell-output-error}\n\n```\nError in library(ggbump): there is no package called 'ggbump'\n```\n\n\n:::\n\n````{.cell-code}\n```{{r}}\nlibrary(treemap)     # for treemap plots\n```\n````\n\n::: {.cell-output .cell-output-error}\n\n```\nError in library(treemap): there is no package called 'treemap'\n```\n\n\n:::\n\n````{.cell-code}\n```{{r}}\nlibrary(ggwordcloud) # for word clouds\nlibrary(tidytext)    # for manipulating text for word clouds\nlibrary(gganimate)   # for animated plots\n\n#install.packages(\"rnaturalearthhires\", repos = \"http://packages.ropensci.org\", type = \"source\")\nlibrary(sf)          # for mapping geoms\nlibrary(rnaturalearth) # for map data\n```\n````\n\n::: {.cell-output .cell-output-error}\n\n```\nError in library(rnaturalearth): there is no package called 'rnaturalearth'\n```\n\n\n:::\n\n````{.cell-code}\n```{{r}}\nlibrary(rnaturalearthdata) # extra mapping data\n```\n````\n\n::: {.cell-output .cell-output-error}\n\n```\nError in library(rnaturalearthdata): there is no package called 'rnaturalearthdata'\n```\n\n\n:::\n\n````{.cell-code}\n```{{r}}\ntheme_set(theme_light())\n```\n````\n:::\n\n\n\n\nDownload the [ggplot2 cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf).\n\n\n### Defaults\n\nThe code below creates two plots using the default (light) theme and palettes. First, load the data and set `issue_category` to a factor so you can control the order of the categories.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# update column specification\nct <- cols(issue_category = col_factor(\n        levels = c(\"tech\", \"returns\", \"sales\", \"other\")\n      ))\n\n# load data\nsurvey_data <- read_csv(file = \"data/survey_data.csv\",\n                        col_types = ct)\n```\n:::\n\n\n\n\nNext, create a bar plot of number of calls by issue category.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create bar plot\nbar <- ggplot(data = survey_data, \n              mapping = aes(x = issue_category,\n                            fill = issue_category)) +\n  geom_bar(show.legend = FALSE) +\n  labs(x = \"Issue Category\", \n       y = \"Count\",\n       title = \"Calls by Issue Category\")\n```\n:::\n\n\n\n\nAnd create a scatterplot of wait time by call time, distinguished by issue category.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#create scatterplot\npoint <- ggplot(data = survey_data, \n                mapping = aes(x = wait_time, \n                              y = call_time,\n                              color = issue_category)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = lm, formula = y~x) +\n  labs(x = \"Wait Time\",\n       y = \"Call Time\",\n       color = \"Issue Category\",\n       title = \"Wait Time by Call Time\")\n```\n:::\n\n\n\n\nFinally, combine the two plots using the `+` from <code class='package'>patchwork</code> to see the default styles for these plots.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbar + point\n```\n\n::: {.cell-output-display}\n![Default plot styles.](images/figures/unnamed-chunk-5-1.png){width=100%}\n:::\n:::\n\n\n\n\n::: {.try data-latex=\"\"}\nTry changing the theme using built-in themes or customising the colours or linetypes with scale_* functions. See Appendix\\ \\@ref(plotstyle) for details.\n:::\n\n\n### Annotations\n\nIt's often useful to add annotations to a plot, for example, to highlight an important part of the plot or add labels. The `annotate()` function creates a specific geom at x- and y-coordinates you specify. \n\n#### Text annotations\n\nAdd a text annotation by setting the `geom` argument to \"text\" or \"label\" and adding a `label`. Labels have padding and a background, while text is just text.\n\n* Backslash-n `\\n` in the label text controls where the line breaks are. Try removing or changing the position of these to see what happens. \n* `x` and `y` control the coordinates of the label. You will likely have to play around with these values to get them right.\n* The argument `hjust` is the horizontal justification of text, and `vjust` is the vertical justification. The default values are 0.5, where the text is centred on the x and y coordinates. 0 will justify to the left and bottom, while 1 justifies to the right and top. \n* You can  change the `angle` of text, but not labels.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbar +\n  # add left-justified text to the second bar\n  annotate(geom = \"text\",\n           label = \"Our goal is to\\nreduce this\\ncategory\",\n           x = 1.65, y = 150,\n           hjust = 0, vjust = 1, \n           color = \"white\", fontface = \"bold\",\n           angle = 45) +\n  # add a centred label to the third bar\n  annotate(geom = \"label\",\n           label = \"Our goal is\\nto increase this\\ncategory\",\n           x = 3, y = 75,\n           hjust = 0.5, vjust = 1, \n           color = \" darkturquoise\", fontface = \"bold\")\n```\n\n::: {.cell-output-display}\n![An example of annotation text and label.](images/figures/annotate-text-1.png){width=100%}\n:::\n:::\n\n\n\n\n\n::: {.try data-latex=\"\"}\n\nSee if you can work out how to make the figure below, starting with the following:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(x = c(0, 0, 1, 1),\n       y = c(0, 1, 0, 1)) |>\n  ggplot(aes(x, y)) +\n  geom_point(alpha = 0.25, size = 4, color = \"red\")\n```\n:::\n\n\n\n\nHint: you will need to add 1 label annotation and 8 separate text annotations.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/figures/unnamed-chunk-7-1.png){width=100%}\n:::\n:::\n\n::: {.cell webex.hide='true'}\n\n<div class='webex-solution'><button>Solution</button>\n\n```{.r .cell-code}\ntibble(x = c(0, 0, 1, 1),\n       y = c(0, 1, 0, 1)) |>\n  ggplot(aes(x, y)) +\n  geom_point(alpha = 0.25, size = 4, color = \"red\") +\n  annotate(\"label\", label = \"In the\\nmiddle\",\n           x = 0.5, y = 0.5,\n           fill = \"dodgerblue\", color = \"white\",\n           label.padding = unit(1, \"lines\"),\n           label.r = unit(1.5, \"lines\")) +\n  annotate(\"text\", label = \"Bottom\\nLeft\",\n           x = 0, y = 0, hjust = 0, vjust = 0) +\n  annotate(\"text\", label = \"Top\\nLeft\", \n           x = 0, y = 1, hjust = 0, vjust = 1) +\n  annotate(\"text\", label = \"Bottom\\nRight\",\n           x = 1, y = 0, hjust = 1, vjust = 0) +\n  annotate(\"text\", label = \"Top\\nRight\",\n           x = 1, y = 1, hjust = 1, vjust = 1) +\n  annotate(\"text\", label = \"45 degrees\",\n           x = 0, y = 0.5, hjust = 0, angle = 45) +\n  annotate(\"text\", label = \"90 degrees\",\n           x = 0.25, y = 0.5, angle = 90) +\n  annotate(\"text\", label = \"270 degrees\",\n           x = 0.75, y = 0.5, angle = 270)+\n  annotate(\"text\", label = \"-45 degrees\",\n           x = 1, y = 0.5, hjust = 1, angle = -45)\n```\n\n\n</div>\n:::\n\n\n\n:::\n\n#### Other annotations\n\nYou can add other geoms to highlight parts of a plot. The example below adds a rectangle around a group of points, a text label, a straight arrow from the label to the rectangle, and a curved arrow from the label to an individual point.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoint +\n  # add a rectangle surrounding long call times\n  annotate(geom = \"rect\",\n           xmin = 100, xmax = 275,\n           ymin = 140, ymax = 180,\n           fill = \"transparent\", color = \"red\") +\n  # add a text label\n  annotate(\"text\",\n           x = 260, y = 120,\n           label = \"outliers\") +\n  # add an line with an arrow from the text to the box\n  annotate(geom = \"segment\", \n           x = 240, y = 120, \n           xend = 200, yend = 135,\n           arrow = arrow(length = unit(0.5, \"lines\"))) +\n  # add a curved line with an arrow \n  # from the text to a wait time outlier\n  annotate(geom = \"curve\", \n          x = 280, y = 120, \n          xend = 320, yend = 45,\n          curvature = -0.5,\n          arrow = arrow(length = unit(0.5, \"lines\")))\n```\n\n::: {.cell-output-display}\n![Example of annotatins with the rect, text, segment, and curve geoms.](images/figures/annotation-other-1.png){width=100%}\n:::\n:::\n\n\n\n\nSee the <code class='package'><a href='https://ggforce.data-imaginist.com/' target='_blank'>ggforce</a></code> package for more sophisticated options, such as highlighting a group of points with an ellipse. \n\n### Other Plots {#sec-other-plots}\n\n#### Interactive Plots\n\nThe <code class='package'>plotly</code> package can be used to make interactive graphs. Assign your ggplot to a variable and then use the function `ggplotly()` on the plot object. Note that interactive plots only work in HTML files, not PDFs or Word files.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplotly(point)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplotly(point): could not find function \"ggplotly\"\n```\n\n\n:::\n:::\n\n\n\n\n::: {.info data-latex=\"\"}\nHover over the data points above and click on the legend items.\n:::\n\n#### Waffle Plots\n\nIn Chapter\\ \\@ref(ggplot), we mentioned that pie charts are such a poor way to visualise proportions that we refused to even show you how to make one. Waffle plots are a delicious alternative. \n\n::: {.warning data-latex=\"\"}\nUse <code class='package'>waffle</code> by [hrbrmstr on GitHub](https://github.com/hrbrmstr/waffle/) using the `install_github()` function below, rather than the one on CRAN you get from using `install.packages()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"hrbrmstr/waffle\")\n```\n:::\n\n\n\n\n:::\n\nBy default, `geom_waffle()` represents each observation with a tile and splits these across 10 rows. You can play about with the `n_rows` argument to determine what works best for your data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_data |> \n  count(issue_category) |>\n  ggplot(aes(fill = issue_category, values = n)) +\n  geom_waffle(\n    n_rows = 23, # try setting this to 10 (the default)\n    size = 0.33, # line size\n    make_proportional = FALSE, # use raw values\n    colour = \"white\", # line colour\n    flip = FALSE, # bottom-top or left-right\n    radius = grid::unit(0.1, \"npc\") # set to 0.5 for circles\n  ) +\n  theme_enhance_waffle() + # gets rid of axes\n  scale_fill_colorblind(name = \"Issue Category\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in geom_waffle(n_rows = 23, size = 0.33, make_proportional = FALSE, : could not find function \"geom_waffle\"\n```\n\n\n:::\n:::\n\n\n\n\nThe waffle plot can also be used to display the counts as proportions To achieve these, set `n_rows = 10` and `make_proportional = TRUE`. Now, rather than each tile representing one observation, each tile represents 1% of the data. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_data |> \n  count(issue_category) |>\n  ggplot(aes(fill = issue_category, values = n)) +\n  geom_waffle(\n    n_rows = 10, \n    size = 0.33, \n    make_proportional = TRUE, # compute proportions\n    colour = \"white\", \n    flip = FALSE, \n    radius = grid::unit(0.1, \"npc\") \n  ) +\n  theme_enhance_waffle() + \n  scale_fill_colorblind(name = \"Issue Category\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in geom_waffle(n_rows = 10, size = 0.33, make_proportional = TRUE, : could not find function \"geom_waffle\"\n```\n\n\n:::\n:::\n\n\n\n\n#### Treemap\n\nTreemap plots are another way to visualise proportions. Like the waffle plots, you need to count the data by category first. You can use any [brewer palette](https://www.datanovia.com/en/blog/the-a-z-of-rcolorbrewer-palette/) for the fill. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_data |> \n  count(issue_category) |>\n  treemap(\n    index = \"issue_category\", # column with number of rectangles\n    vSize = \"n\", # column with size of rectangle\n    title = \"\",\n    palette = \"BuPu\",\n    inflate.labels = TRUE # expand labels to size of rectangle\n  )\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in treemap(count(survey_data, issue_category), index = \"issue_category\", : could not find function \"treemap\"\n```\n\n\n:::\n:::\n\n\n\n\nYou can also represent multiple categories with treemaps\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_data |> \n  count(issue_category, employee_id) |>\n  arrange(employee_id) |>\n  treemap(\n    # use c() to specify two variables\n    index = c(\"employee_id\", \"issue_category\"), \n    vSize = \"n\", \n    title = \"\",\n    palette = \"Dark2\",\n    # set different label sizes for each type of label\n    fontsize.labels = c(30, 10), \n    # set different alignments for two label types\n    align.labels = list(c(\"left\", \"top\"), c(\"center\", \"center\")) \n  )\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in treemap(arrange(count(survey_data, issue_category, employee_id), : could not find function \"treemap\"\n```\n\n\n:::\n:::\n\n\n\n\n\n#### Bump Plots\n\nBump plots are very useful for visualising how rankings change over time. So first, we need to get some ranking data. Let's start with a more typical raw data table, containing an identifying column of `person` and three columns for their scores each week\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make a small dataset of scores for 3 people over 3 weeks\nscore_data <- tribble(\n  ~person, ~week_1, ~week_2, ~week_3,\n  \"Abeni\",      80,     75,       90,\n  \"Beth\",       75,     85,       75,\n  \"Carmen\",     60,     70,       80\n)\n```\n:::\n\n\n\n\nNow we make the table long, group by week, and use the `rank()` function to find the rank of each person's score each week. Use `n() - rank(score) + 1` to reverse the ranks so that the highest score gets rank 1. We also need to make the `week` variable a number.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate ranks\nrank_data <- score_data |>\n  pivot_longer(cols = -person,\n               names_to = \"week\",\n               values_to = \"score\") |>\n  group_by(week) |>\n  mutate(rank = n() - rank(score) + 1) |>\n  ungroup() |>\n  arrange(week, rank) |>\n  mutate(week = str_replace(week, \"week_\", \"\") |> as.integer())\n\nrank_data\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|person | week| score| rank|\n|:------|----:|-----:|----:|\n|Abeni  |    1|    80|    1|\n|Beth   |    1|    75|    2|\n|Carmen |    1|    60|    3|\n|Beth   |    2|    85|    1|\n|Abeni  |    2|    75|    2|\n|Carmen |    2|    70|    3|\n|Abeni  |    3|    90|    1|\n|Carmen |    3|    80|    2|\n|Beth   |    3|    75|    3|\n\n</div>\n:::\n:::\n\n\n\n\nA typical mapping for a bump plot puts the time variable in the x-axis, the rank variable on the y-axis, and sets colour to the identifying variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rank_data, \n       mapping = aes(x = week, \n                     y = rank, \n                     colour = person)) +\n  ggbump::geom_bump()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in loadNamespace(x): there is no package called 'ggbump'\n```\n\n\n:::\n:::\n\n\n\n\nWe can make this more attractive by customising the axes and adding text labels. Try running each line of this code to see how it builds up.\n\n* Add `label = person` to the mapping so we can add in text labels.\n* Increase the size of the lines with the `size` argument to `geom_bump()`\n* We don't need labels for weeks 1.5 and 2.5, so change the x-axis `breaks`\n* The `expand` argument for the two scale_ functions expands the plot area so we can fit text labels to the right.\n* It makes more sense to have first place at the top, so reverse the order of the y-axis with `scale_y_reverse()` and fix the breaks and expansion.\n* Add text labels with `geom_text()`, but just for week 3, so set `data =  filter(rank_data, week == 3)` for this geom. \n* Set `x = 3.05` to move the text labels just to the right of week 3, and set `hjust = 0` to right-justify the text labels (the default is `hjust = 0.5`, which would center them on 3.05).\n* Remove the legend and grid lines. Increase the x-axis text size.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rank_data, \n       mapping = aes(x = week, \n                     y = rank, \n                     colour = person,\n                     label = person)) +\n  ggbump::geom_bump(size = 10) +\n  scale_x_continuous(name = \"\",\n                     breaks = 1:3, \n                     labels = c(\"Week 1\", \"Week 2\", \"Week 3\"),\n                     expand = expansion(c(.05, .2))) +\n  scale_y_reverse(name = \"Ranking\",\n                  breaks = 1:3, \n                  expand = expansion(.2)) +\n  geom_text(data = filter(rank_data, week == 3),\n            color = \"black\", x = 3.05, hjust = 0) +\n  theme(legend.position = \"none\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.x = element_text(size = 12))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in loadNamespace(x): there is no package called 'ggbump'\n```\n\n\n:::\n:::\n\n\n\n\n\n#### Word Clouds\n\nWord clouds are a common way to summarise text data. First, download <a href=\"https://psyteachr.github.io/reprores-v5/data/amazon_alexa.csv\" download>amazon_alexa.csv</a> into your data folder and then load it into an object. This dataset contains  text reviews as well as the 1-5 rating from customers who bought an Alexa device on Amazon.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://www.kaggle.com/sid321axn/amazon-alexa-reviews\n# extracted from Amazon by Manu Siddhartha & Anurag Bhatt\nalexa <- rio::import(\"data/amazon_alexa.csv\")\n```\n:::\n\n\n\n\nWe can use this data to look at how the words used differ depending on the rating given. To make the text data easy to work with, the function `tidytext::unnest_tokens()` splits the words in the `input` column into individual words in a new `output` column. `unnnest_tokens()` is particularly helpful because it also does things like removes punctuation and transforms all words to lower case to make it easier to work with. Compare `words` and `alexa` to see how they map on to each other.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwords <- alexa |>\n  unnest_tokens(output = \"word\", input = \"verified_reviews\")\n```\n:::\n\n\n\n\nWe can then add another line of code using a pipe that counts how many instances of each word there is by rating to give us the most popular words.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwords <- alexa |>\n  unnest_tokens(output = \"word\", input = \"verified_reviews\") |>\n  count(word, rating, sort = TRUE) \n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|word | rating|    n|\n|:----|------:|----:|\n|i    |      5| 1859|\n|the  |      5| 1839|\n|to   |      5| 1633|\n|it   |      5| 1571|\n|and  |      5| 1477|\n|my   |      5|  980|\n\n</div>\n:::\n:::\n\n\n\n\nThe problem is that the most common words are all function words rather than content words, which makes sense because these words have the highest word frequency in natural language.\n\nHelpfully, `tidytext` contains a list of common \"stop words\", i.e., words that you want to ignore, that are stored in an object named `stop_words`.  It is also very useful to define a list of custom stop words based upon the unique properties of your data (it can sometimes take a few attempts to identify what's appropriate for your dataset). This dataset contains a lot of numbers that aren't informative, and it also contains \"https\" from website links, so we'll get rid of both with a custom stop list.\n\nOnce you have defined your stop words, you can then use `anti_join()`  to remove any `word` that is present in the stop word list.\n\nTo get the top 25 words, we then group by rating and use `dplyr::slice_max()`, ordered by the column `n`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_stop <- tibble(word = c(0:9, \"https\", 34))\n\nwords <- alexa |>\n  unnest_tokens(output = \"word\", input = \"verified_reviews\") |>\n  count(word, rating) |>\n  anti_join(stop_words, by = \"word\") |>\n  anti_join(custom_stop, by = \"word\") |>\n  group_by(rating) |>\n  slice_max(order_by = n, n = 25, with_ties = FALSE) |>\n  ungroup()\n```\n:::\n\n\n\n\nFirst, let's make a word cloud for customers who gave a 1-star rating:\n\n* Filter retains only the data for 1-star ratings. \n* `label` comes from the `word` column and is the data to plot (i.e., the words).\n* `colour` makes the words red (you could also set this to `word` to give each word a different colour or `n` to vary colour continuously by frequency).\n* `size` makes the size of the word proportional to `n`, the number of times the word appeared.\n* <code><span><span class='fu'>ggwordcloud</span><span class='fu'>::</span><span class='fu'><a target='_blank' href='https://lepennec.github.io/ggwordcloud/reference/geom_text_wordcloud.html'>geom_text_wordcloud_area</a></span><span class='op'>(</span><span class='op'>)</span></span></code> is the word cloud geom. \n* <code><span><span class='fu'>ggwordcloud</span><span class='fu'>::</span><span class='fu'>scale_size_area</span><span class='op'>(</span><span class='op'>)</span></span></code> controls how big the word cloud is (this usually takes some trial-and-error).  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrating1 <- filter(words, rating == 1) |>\n  ggplot(aes(label = word, colour = \"red\", size = n)) +\n  geom_text_wordcloud_area() +\n  scale_size_area(max_size = 10) +\n  ggtitle(\"Rating = 1\") +\n  theme_minimal(base_size = 14)\n\nrating1\n```\n\n::: {.cell-output-display}\n![](images/figures/unnamed-chunk-21-1.png){width=100%}\n:::\n:::\n\n\n\n\nWe can now do the same but for 5-star ratings and paste the plots together with `patchwork` (word clouds don't play well with facets). \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrating5 <- filter(words, rating == 5) |>\n  ggplot(aes(label = word, size = n)) +\n  geom_text_wordcloud_area(colour = \"darkolivegreen3\") +\n  scale_size_area(max_size = 12) +\n  ggtitle(\"Rating = 5\") +\n  theme_minimal(base_size = 14)\n\nrating1 + rating5\n```\n\n::: {.cell-output-display}\n![Word cloud.](images/figures/unnamed-chunk-22-1.png){width=100%}\n:::\n:::\n\n\n\n\n::: {.warning data-latex=\"\"}\nIt's worth highlighting that whilst word clouds are very common, they're really the equivalent of pie charts for text data because we're not very good at making accurate comparisons based on size. You might be able to see what's the most popular word, but can you accurately determine the 2nd, 3rd, 4th or 5th most popular word based on the clouds alone? There's also the issue that just because it's text data doesn't make it a qualitative analysis and just because something is said a lot doesn't mean it's useful or important. But, this argument is outwith the scope of this book, even if it is a recurring part of Emily's life thanks to her qualitative wife. \n:::\n\n\n#### Maps\n\nWorking with maps can be tricky. The <code class='package'>sf</code> package provides functions that work with <code class='package'>ggplot2</code>, such as `geom_sf()`. The <code class='package'>rnaturalearth</code> package (and associated data packages that you may be prompted to download) provide high-quality mapping coordinates.\n\n* `ne_countries()` returns world country polygons (i.e., a world map). We specify the object should be returned as a \"simple feature\" class `sf` so that it will work with `geom_sf()`. If you would like a deep dive on simple feature objects, check out a [vignette](https://r-spatial.github.io/sf/articles/sf1.html) from the <code class='package'>sf</code> package.\n* It's worth checking out what the object `ne_countries()` returns to see just how much information is available.\n* Try changing the values and colours below to get a sense of how the code works.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get the world map coordinates\nworld_sf <- ne_countries(returnclass = \"sf\", scale = \"medium\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ne_countries(returnclass = \"sf\", scale = \"medium\"): could not find function \"ne_countries\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# plot them on a light blue background\nggplot() + \n  geom_sf(data = world_sf, size = 0.3) +\n  theme(panel.background = element_rect(fill = \"lightskyblue2\"))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'world_sf' not found\n```\n\n\n:::\n:::\n\n\n\n\nYou can combine multiple countries using `bind_rows()` and visualise them with different colours for each country.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get and bind country data\nuk_sf <- ne_states(country = \"united kingdom\", returnclass = \"sf\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ne_states(country = \"united kingdom\", returnclass = \"sf\"): could not find function \"ne_states\"\n```\n\n\n:::\n\n```{.r .cell-code}\nireland_sf <- ne_states(country = \"ireland\", returnclass = \"sf\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ne_states(country = \"ireland\", returnclass = \"sf\"): could not find function \"ne_states\"\n```\n\n\n:::\n\n```{.r .cell-code}\nislands <- bind_rows(uk_sf, ireland_sf) |>\n  filter(!is.na(geonunit))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'uk_sf' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n# set colours\ncountry_colours <- c(\"Scotland\" = \"#0962BA\",\n                     \"Wales\" = \"#00AC48\",\n                     \"England\" = \"#FF0000\",\n                     \"Northern Ireland\" = \"#FFCD2C\",\n                     \"Ireland\" = \"#F77613\")\n\nggplot() + \n  geom_sf(data = islands,\n          mapping = aes(fill = geonunit),\n          colour = NA,\n          alpha = 0.75) +\n  coord_sf(crs = sf::st_crs(4326),\n           xlim = c(-10.7, 2.1), \n           ylim = c(49.7, 61)) +\n  scale_fill_manual(name = \"Country\", \n                    values = country_colours)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `fortify()`:\n! `data` must be a <data.frame>, or an object coercible by `fortify()`,\n  or a valid <data.frame>-like object coercible by `as.data.frame()`.\nCaused by error in `.prevalidate_data_frame_like_object()`:\n! `dim(data)` must return an <integer> of length 2.\n```\n\n\n:::\n:::\n\n\n\n\n\nYou can join <a href=\"https://psyteachr.github.io/reprores-v5/data/scottish_population.csv\" download>Scottish population data</a> to the map table to visualise data on the map using colours or labels.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load map data\nscotland_sf <- ne_states(geounit = \"Scotland\", \n                         returnclass = \"sf\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ne_states(geounit = \"Scotland\", returnclass = \"sf\"): could not find function \"ne_states\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# load population data from\n# https://www.indexmundi.com/facts/united-kingdom/quick-facts/scotland/population\nscotpop <- read_csv(\"data/scottish_population.csv\", \n                    show_col_types = FALSE)\n\n# join data and fix typo in the map\nscotmap_pop <- scotland_sf |>\n  mutate(name = ifelse(name == \"North Ayshire\", \n                       yes = \"North Ayrshire\", \n                       no = name)) |>\n  left_join(scotpop, by = \"name\") |>\n  select(name, population, geometry)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'scotland_sf' not found\n```\n\n\n:::\n:::\n\n\n\n\n::: {.warning data-latex=\"\"}\nThere is a typo in the data from <code class='package'>rnaturalearth</code>, so you need to change \"North Ayshire\" to \"North Ayrshire\" before you join the population data.\n:::\n\n* Setting the fill to population in `geom_sf()` gives each region a colour based on its population. \n* The colours are customised with `scale_fill_viridis_c()`. The breaks of the fill scale are set to increments of 100K (1e5 in scientific notation) and the scale is set to span 0 to 600K. \n* `paste0()` creates the labels by taking the numbers 0 through 6 and adding \"00 k\" to them.\n* Finally, the position of the legend is moved into the sea using `legend.position()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot\nggplot() + \n  geom_sf(data = scotmap_pop,\n          mapping = aes(fill = population),\n          color = \"white\", \n          size = .1) +\n  coord_sf(xlim = c(-8, 0), ylim = c(54, 61)) +\n  scale_fill_viridis_c(name = \"Population\",\n                       breaks = seq(from = 0, to = 6e5, by = 1e5), \n                       limits = c(0, 6e5),\n                       labels = paste0(0:6, \"00 K\")) +\n  theme(legend.position = c(0.16, 0.84))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'scotmap_pop' not found\n```\n\n\n:::\n:::\n\n\n\n\n#### Animated Plots\n\nAnimated plots are a great way to add a wow factor to your reports, but they can be complex to make, distracting, and not very accessible, so use them sparingly and only for data visualisation where the animation really adds something. The package <code class='package'><a href='https://gganimate.com/' target='_blank'>gganimate</a></code> has many functions for animating ggplots.\n\nHere, we'll load some population data from the United Nations. <a href=\"data/WPP2019_POP_F01_1_TOTAL_POPULATION_BOTH_SEXES.xlsx\" download>Download the file</a> into your data folder and open it in Excel first to see what it looks like. The code below gets the data from the first tab, filters it to just the 6 world regions, makes the data long, and makes sure the `year` column is numeric and the `pop` column shows population in whole numbers (the original data is in 1000s).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load and process data\nworldpop <- readxl::read_excel(\"data/WPP2019_POP_F01_1_TOTAL_POPULATION_BOTH_SEXES.xlsx\", skip = 16) |>\n  filter(Type == \"Region\") |>\n  select(region = 3, `1950`:`1992`) |>\n  pivot_longer(cols = -region, \n               names_to = \"year\",\n               values_to = \"pop\") |>\n  mutate(year = as.integer(year),\n         pop = round(1000 * as.numeric(pop)))\n```\n:::\n\n\n\n\nLet's make an animated plot showing how the population in each region changes with year. First, make a static plot. Filter the data to the most recent year so you can see what a single frame of the animation will look like.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworldpop |>\n  filter(year == 1992) |>\n  ggplot(aes(x = region, y = pop, fill = region)) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_viridis_d() +\n  scale_x_discrete(name = \"\", \n                   guide = guide_axis(n.dodge=2))+\n  scale_y_continuous(name = \"Population\",\n                     breaks = seq(0, 3e9, 1e9),\n                     labels = paste0(0:3, \"B\")) +\n  ggtitle('Year: 1992')\n```\n\n::: {.cell-output-display}\n![](images/figures/unnamed-chunk-25-1.png){width=100%}\n:::\n:::\n\n\n\n\nTo convert this to an animated plot that shows the data from multiple years:\n\n* Remove the filter and add `transition_time(year)`. \n* Use the `{}` syntax to include the `frame_time` in the title. \n* Use `anim_save()` to save the animation to a GIF file and set this code chunk to `eval = FALSE` because creating an animation takes a long time and you don't want to have to run it every time you knit your report.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanim <- worldpop |>\n  ggplot(aes(x = region, y = pop, fill = region)) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_viridis_d() +\n  scale_x_discrete(name = \"\",\n                   guide = guide_axis(n.dodge=2))+\n  scale_y_continuous(name = \"Population\",\n                     breaks = seq(0, 3e9, 1e9),\n                     labels = paste0(0:3, \"B\")) +\n  ggtitle('Year: {frame_time}') +\n  transition_time(year)\n  \ndir.create(\"images\", FALSE) # creates an images directory if needed\n\nanim_save(filename = \"images/gganim-demo.gif\",\n          animation = anim,\n          width = 8, height = 5, units = \"in\", res = 150)\n```\n:::\n\n\n\n\nYou can show your animated gif in an html report (animations don't work in Word or a PDF) using `include_graphics()`, or include the GIF in a dynamic document like PowerPoint.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"images/gganim-demo.gif\")\n```\n\n::: {.cell-output-display}\n![Animated gif.](images/gganim-demo.gif){width=100%}\n:::\n:::\n\n\n\n\n\n::: {.warning data-latex=\"\"}\nThere are actually not many plots that are really improved by animating them. The plot below gives the same information at a single glance.\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](images/figures/anim-alternative-1.png){width=100%}\n:::\n:::\n\n\n\n\n:::\n\n### Resources  {#resources-custom}\n\nThere are so many more options for data visualisation in R than we have time to cover here. The following resources will get you started on your journey to informative, intuitive visualisations.\n\n* [The R Graph Gallery](http://www.r-graph-gallery.com/) (this is really useful)\n* [Look at Data](https://socviz.co/lookatdata.html) from [Data Vizualization for Social Science](http://socviz.co/)\n* [Graphs](http://www.cookbook-r.com/Graphs) in *Cookbook for R*\n* [Top 50 ggplot2 Visualizations](http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html)\n* [R Graphics Cookbook](http://www.cookbook-r.com/Graphs/) by Winston Chang\n* [ggplot extensions](https://exts.ggplot2.tidyverse.org/)\n* [plotly](https://plot.ly/ggplot2/) for creating interactive graphs\n* [Drawing Beautiful Maps Programmatically](https://r-spatial.org/r/2018/10/25/ggplot2-sf.html)\n* [gganimate](https://gganimate.com/)\n\n\n## Reports {#sec-custom-reports}\n\n### Set-up {#setup-custom-reports}\n\n1. Close the file `10-viz.qmd`\n1. Create a new quarto file called `11-reports.qmd`\n1. Update the YAML header \n1. Replace the setup chunk with the one below: \n\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#‎| label: setup\n#‎| include: false\n\n# packages needed for this chapter section\nlibrary(tidyverse)     # data wrangling functions\nlibrary(bookdown)      # for chaptered reports\nlibrary(flexdashboard) # for dashboards\n```\n````\n\n::: {.cell-output .cell-output-error}\n\n```\nError in library(flexdashboard): there is no package called 'flexdashboard'\n```\n\n\n:::\n\n````{.cell-code}\n```{{r}}\nlibrary(DT)            # for interactive tables\n```\n````\n:::\n\n\n\n\n\n### Interactive tables\n\nOne way to make your reports more exciting is to use interactive tables. The `DT::datatable()` function displays a table with some extra interactive elements to allow readers to search and reorder the data, as well as controlling the number of rows shown at once. This can be especially helpful. This only works with HTML output types. The [DT website](https://rstudio.github.io/DT/) has extensive tutorials, but we'll cover the basics here.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DT)\n\nscotpop <- read_csv(\"data/scottish_population.csv\", \n                    show_col_types = FALSE)\n\ndatatable(data = scotpop)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-8a6b8630c45872e60ed0\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-8a6b8630c45872e60ed0\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\"],[\"Aberdeen\",\"Aberdeenshire\",\"Angus\",\"Argyll and Bute\",\"Edinburgh\",\"Clackmannanshire\",\"Dumfries and Galloway\",\"Dundee\",\"East Ayrshire\",\"East Dunbartonshire\",\"East Lothian\",\"East Renfrewshire\",\"Eilean Siar\",\"Falkirk\",\"Fife\",\"Glasgow\",\"Highland\",\"Inverclyde\",\"Midlothian\",\"Moray\",\"North Ayrshire\",\"North Lanarkshire\",\"Orkney\",\"Perthshire and Kinross\",\"Renfrewshire\",\"Scottish Borders\",\"Shetland Islands\",\"South Ayrshire\",\"South Lanarkshire\",\"Stirling\",\"West Dunbartonshire\",\"West Lothian\"],[217120,245780,110570,89200,486120,50630,148190,144290,120240,104580,97500,89540,26190,153280,365020,592820,221630,79770,81140,87720,135180,326360,20110,147780,170250,112870,22400,111440,311880,89850,90570,172080]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>name<\\/th>\\n      <th>population<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":2},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"name\",\"targets\":1},{\"name\":\"population\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n\nYou can customise the display, such as changing column names, adding a caption, moving the location of the filter boxes, removing row names, applying [classes](https://datatables.net/manual/styling/classes) to change table appearance, and applying [advanced options](https://datatables.net/reference/option/).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://datatables.net/reference/option/\nmy_options <- list(\n  pageLength = 5, # how many rows are displayed\n  lengthChange = FALSE, # whether pageLength can change\n  info = TRUE, # text with the total number of rows\n  paging = TRUE, # if FALSE, the whole table displays\n  ordering = FALSE, # whether you can reorder columns\n  searching = FALSE # whether you can search the table\n)\n\ndatatable(\n  data = scotpop,\n  colnames = c(\"County\", \"Population\"),\n  caption = \"The population of Scottish counties.\",\n  filter = \"none\", # \"none\", \"bottom\" or \"top\"\n  rownames = FALSE, # removes the number at the left\n  class = \"cell-border hover stripe\", # default is \"display\"\n  options = my_options\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-f09c826ffb7a91897d25\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f09c826ffb7a91897d25\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>The population of Scottish counties.<\\/caption>\",\"data\":[[\"Aberdeen\",\"Aberdeenshire\",\"Angus\",\"Argyll and Bute\",\"Edinburgh\",\"Clackmannanshire\",\"Dumfries and Galloway\",\"Dundee\",\"East Ayrshire\",\"East Dunbartonshire\",\"East Lothian\",\"East Renfrewshire\",\"Eilean Siar\",\"Falkirk\",\"Fife\",\"Glasgow\",\"Highland\",\"Inverclyde\",\"Midlothian\",\"Moray\",\"North Ayrshire\",\"North Lanarkshire\",\"Orkney\",\"Perthshire and Kinross\",\"Renfrewshire\",\"Scottish Borders\",\"Shetland Islands\",\"South Ayrshire\",\"South Lanarkshire\",\"Stirling\",\"West Dunbartonshire\",\"West Lothian\"],[217120,245780,110570,89200,486120,50630,148190,144290,120240,104580,97500,89540,26190,153280,365020,592820,221630,79770,81140,87720,135180,326360,20110,147780,170250,112870,22400,111440,311880,89850,90570,172080]],\"container\":\"<table class=\\\"cell-border hover stripe\\\">\\n  <thead>\\n    <tr>\\n      <th>County<\\/th>\\n      <th>Population<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"lengthChange\":false,\"info\":true,\"paging\":true,\"ordering\":false,\"searching\":false,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":1},{\"name\":\"name\",\"targets\":0},{\"name\":\"population\",\"targets\":1}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n::: {.try data-latex=\"\"}\nCreate an interactive table like the one below from the `diamonds` dataset of diamonds where the `table` value is greater than 65 (the whole table is *much* too large to display with an interactive table). Show 20 items by default and remove the search box, but leave in the filter and other default options.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-7e94de14ee79e363d087\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7e94de14ee79e363d087\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>All diamonds with table &gt; 65.<\\/caption>\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\",\"163\",\"164\",\"165\",\"166\",\"167\",\"168\",\"169\",\"170\",\"171\",\"172\",\"173\",\"174\",\"175\",\"176\",\"177\",\"178\",\"179\",\"180\",\"181\"],[0.86,0.84,0.7,0.76,0.57,0.74,0.91,0.98,0.75,0.72,0.9,0.75,0.99,0.98,1.06,0.85,0.73,1.2,0.91,1,0.95,0.9,0.9,0.99,0.9,1.01,0.98,0.96,1,1.01,1.01,1.17,1.18,0.9,1,1.01,0.9,1,0.9399999999999999,0.97,0.31,0.91,1.05,1.45,1,0.51,1.07,0.9,0.91,1.18,1.07,1.45,1.13,1.17,0.3,1,1.01,0.93,1.01,1,1.65,1.14,1.5,1.16,1.42,1.24,2.01,1.44,1.57,1.5,1.51,1.52,1.53,1.76,1.55,1.51,1.52,1,1.51,1.5,1.51,2,2.1,1.91,2,1.32,2.29,1.98,1.51,2.01,2.01,2.29,2.01,2.48,2.01,0.23,2.1,0.23,0.3,0.45,0.36,0.5,0.5,0.23,0.46,0.3,0.4,0.43,0.46,0.5,0.54,0.5,0.7,0.5,0.5,0.49,0.5600000000000001,0.5,0.51,0.89,0.5,0.52,0.64,0.52,0.67,0.68,0.62,0.67,0.7,0.53,0.5,0.5600000000000001,0.57,0.75,0.71,0.71,0.7,0.75,0.73,0.96,0.7,0.5,0.75,0.77,0.74,0.7,0.7,0.7,0.7,0.77,0.6899999999999999,0.7,0.9,0.6,0.71,0.7,0.6899999999999999,0.77,0.8100000000000001,0.71,0.76,0.73,0.62,0.7,0.79,0.71,0.7,1.05,0.71,0.6,0.82,0.76,0.97,0.88,0.5,0.5,0.89,0.72,0.71,0.78,0.71],[\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Good\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Good\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Good\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Good\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Good\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Very Good\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Fair\",\"Faircontainer\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>carat<\\/th>\\n      <th>cut<\\/th>\\n      <th>color<\\/th>\\n      <th>clarity<\\/th>\\n      <th>depth<\\/th>\\n      <th>price<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":20,\"searching\":false,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,5,6]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"carat\",\"targets\":1},{\"name\":\"cut\",\"targets\":2},{\"name\":\"color\",\"targets\":3},{\"name\":\"clarity\",\"targets\":4},{\"name\":\"depth\",\"targets\":5},{\"name\":\"price\",\"targets\":6}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[10,20,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n::: {.cell webex.hide='true'}\n\n<div class='webex-solution'><button>Solution</button>\n\n```{.r .cell-code}\nmy_options <- list(\n  pageLength = 20, # how many rows are displayed\n  searching = FALSE # whether you can search the table\n)\n\ndiamonds |> \n  filter(table > 65) |>\n  select(-table, -(x:z)) |>\n  DT::datatable(\n    caption = \"All diamonds with table > 65.\",\n    options = my_options\n  )\n```\n\n\n</div>\n:::\n\n\n\n:::\n\n\n\n### Other formats\n\nYou can create more than just reports with R Markdown. You can also create presentations, interactive dashboards, books, websites, and web applications.\n\n#### Presentations\n\nYou can choose a presentation template when you create a new R Markdown document. We'll use ioslides for this example, but the other formats work similarly.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Ioslides RMarkdown template.](images/present/new-ioslides.png){width=100%}\n:::\n:::\n\n\n\n\nThe main differences between this and the Rmd files you've been working with until now are that the `output` type in the <a href='https://psyteachr.github.io/glossary/y#yaml' target='_blank' class='glossary' title='A structured format for information'>YAML</a> header is `ioslides_presentation` instead of `html_document` and this format requires a specific title structure. Each slide starts with a level-2 header.\n\nThe template provides you with examples of text, bullet point, code, and plot slides. You can knit this template to create an <a href='https://psyteachr.github.io/glossary/h#html' target='_blank' class='glossary' title='Hyper-Text Markup Language: A system for semantically tagging structure and information on web pages.'>HTML</a> document with your presentation. It often looks odd in the RStudio built-in browser, so click the button to open it in a web browser. You can use the space bar or arrow keys to advance slides.\n\nThe code below shows how to load some packages and display text, a table, and a plot. You can see the [HTML output here](demos/ioslides.html).\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n\n\n\n\n````{.md}\n---\ntitle: \"Presentation Demo\"\nauthor: \"Lisa DeBruine\"\noutput: ioslides_presentation\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE)\nlibrary(tidyverse)\nlibrary(kableExtra)\n```\n\n## Slide with Markdown\n\nThe following slides will present some data from the `diamonds` dataset from **ggplot2**.\n\nDiamond price depends on many features, such as:\n\n- cut\n- colour\n- clarity\n- carats\n\n## Slide with a Table\n\n```{r}\ndiamonds %>%\n  group_by(cut, color) %>%\n  summarise(avg_price = mean(price),\n            .groups = \"drop\") %>%\n  pivot_wider(names_from = cut, values_from = avg_price) %>%\n  kable(digits = 0, caption = \"Mean diamond price by cut and colour.\") %>%\n  kable_material()\n```\n\n## Slide with a Plot\n\n```{r pressure}\nggplot(diamonds, aes(x = cut, y = price, color = color)) +\n  stat_summary(fun = mean, geom = \"point\") +\n  stat_summary(aes(x = as.integer(cut)), \n               fun = mean, geom = \"line\") +\n  scale_x_discrete(position = \"top\") +\n  scale_color_viridis_d(guide = guide_legend(reverse = TRUE)) +\n  theme_minimal() \n```\n\n````\n\n\n\n\n\n</div>\n\n\n#### Dashboards\n\nDashboards are a way to display text, tables, and plots with dynamic formatting. After you install <code class='package'>flexdashboard</code>, you can choose a flexdashboard template when you create a new R Markdown document. \n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Flexdashboard RMarkdown template.](images/present/flexdashboard-template.png){width=100%}\n:::\n:::\n\n\n\n\nThe code below shows how to load some packages, display two tables in a tabset, and display two plots in a column. You can see the [HTML output here](demos/flexdashboard.html).\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n\n\n\n\n````{.md}\n---\ntitle: \"Flexdashboard Demo\"\noutput: \n  flexdashboard::flex_dashboard:\n    social: [ \"twitter\", \"facebook\", \"linkedin\", \"pinterest\" ]\n    source_code: embed\n    orientation: columns\n    vertical_layout: fill\n---\n\n```{r setup, include=FALSE}\nlibrary(flexdashboard)\nlibrary(tidyverse)\nlibrary(kableExtra)\nlibrary(DT) # for interactive tables\ntheme_set(theme_minimal())\n```\n\nColumn {data-width=350, .tabset}\n--------------------------------\n\n### By Cut\n\nThis table uses `kableExtra` to render the table with a specific theme.\n\n```{r}\ndiamonds %>%\n  group_by(cut) %>%\n  summarise(avg = mean(price),\n            .groups = \"drop\") %>%\n  kable(digits = 0, \n        col.names = c(\"Cut\", \"Average Price\"),\n        caption = \"Mean diamond price by cut.\") %>%\n  kable_classic()\n```\n\n### By Colour\n\nThis table uses `DT::datatable()` to render the table with a searchable interface.\n\n```{r}\ndiamonds %>%\n  group_by(color) %>%\n  summarise(avg = mean(price),\n            .groups = \"drop\") %>%\n  DT::datatable(colnames = c(\"Colour\", \"Average Price\"), \n                caption = \"Mean diamond price by colour\",\n                options = list(pageLength = 5),\n                rownames = FALSE) %>%\n  DT::formatRound(columns=2, digits=0)\n```\n\nColumn {data-width=350}\n-----------------------\n\n### By Clarity\n\n```{r by-clarity, fig.cap = \"Diamond price by clarity\"}\nggplot(diamonds, aes(x = clarity, y = price)) +\n  geom_boxplot() \n```\n\n\n### By Carats\n\n```{r by-carat, fig.cap = \"Diamond price by carat\"}\nggplot(diamonds, aes(x = carat, y = price)) +\n  stat_smooth()\n```\n\n````\n\n\n\n\n\n</div>\n\n\nChange the size of your web browser to see how the boxes, tables and figures change.\n\nThe best way to figure out how to format a dashboard is trial and error, but you can also look at some [sample layouts](https://pkgs.rstudio.com/flexdashboard/articles/layouts.html).\n\n#### Books\n\nYou can create online books with <code class='package'>bookdown</code>. In fact, the book you're reading was created using bookdown. After you download the package, start a new project and choose \"Book project using bookdown\" from the list of project templates. \n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Bookdown project template.](images/present/bookdown.png){width=100%}\n:::\n:::\n\n\n\n\nEach chapter is written in a separate .Rmd file and the general book settings can be changed in the `_bookdown.yml` and `_output.yml` files. \n\n#### Websites\n\nYou can create a simple website the same way you create any R Markdown document. Choose \"Simple R Markdown Website\" from the project templates to get started. See Appendix\\ \\@ref(webpages) for a step-by-step tutorial.\n\nFor more complex, blog-style websites, you can investigate [<code class='package'>blogdown</code>](https://bookdown.org/yihui/blogdown/). After you install this package, you will also be able to create template blogdown projects to get you started.\n\n#### Shiny\n\nTo get truly interactive, you can take your R coding to the next level and learn Shiny. Shiny apps let your R code react to user input. You can do things like [make a word cloud](https://shiny.psy.gla.ac.uk/debruine/wordcloud/), [search a google spreadsheet](https://shiny.psy.gla.ac.uk/debruine/seen/), or [conduct a survey](https://shiny.psy.gla.ac.uk/debruine/question/).\n\nThis is well outside the scope of this class, but the skills you've learned here provide a good start. The free book [Building Web Apps with R Shiny](https://debruine.github.io/shinyintro/) by one of the authors of this book can get you started creating shiny apps.\n\n### Resources {#sec-resources-report -}\n\n* [RStudio Formats](https://rmarkdown.rstudio.com/formats.html)\n* [R Markdown Cookbook](https://bookdown.org/yihui/rmarkdown-cookbook)\n* [DT](https://rstudio.github.io/DT/)\n* [Flexdashboard](https://pkgs.rstudio.com/flexdashboard/)\n* [Bookdown](https://bookdown.org/yihui/bookdown/)\n* [Blogdown](https://bookdown.org/yihui/blogdown/)\n* [Shiny](https://shiny.rstudio.com/)\n* [Building Web Apps with R Shiny](https://debruine.github.io/shinyintro/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}