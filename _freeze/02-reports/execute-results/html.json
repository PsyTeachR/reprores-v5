{
  "hash": "cf3048bc64d4ba05169ea38f12e98cf4",
  "result": {
    "engine": "knitr",
    "markdown": "# Reports {#sec-reports}\n\n<!-- checked for alt-text -->\n\n<div class=\"right meme\"><img src=\"images/memes/repro_reports.jpg\" alt=\"Top left: young spongebob; top right: Using Base R for your analysis and copy pasting your results into tables in Word; middle left: older angry spongebob in workout clothes; middle right: learning how to use dplyr visualize data with ggplot2 and report your analysis in rmarkdown documents; bottom left: muscular spongebob shirtless in a boxing ring; bottom right: wielding the entire might of the tidyverse (with 50 hex stickers)\" /></div>\n\n## Intended Learning Outcomes {#sec-ilo-reports - .ilo}\n\n- [ ] Structure a project\n- [ ] Render a simple reproducible report with quarto\n- [ ] Create code chunks, tables, images, and inline R\n- [ ] Add a bibliography and citations\n\n\n## Functions used {#functions-reports -}\n\n* built-in (you can always use these without loading any packages)\n    * base:: `max()`, `min()`, `nrow()`, `str()`, `summary()`\n    * utils:: `View()`\n* tidyverse (you can use all these with `library(tidyverse)`)\n    * readr:: `readr::read_csv()`, `readr::row_spec()`\n    * dplyr:: `dplyr::count()`, `dplyr::filter()`\n    * ggplot2:: `ggplot2::aes()`, `ggplot2::geom_point()`, `ggplot2::ggplot()`, `ggplot2::labs()`\n* other (you need to load each package to use these)\n    * tinytex:: `tinytex::install_tinytex()`  \n\n\nDownload the [Quarto Cheat Sheet](https://rstudio.github.io/cheatsheets/html/quarto.html) and [Markdown Cheat Sheet](https://www.markdownguide.org/cheat-sheet/).\n\n## Setup {#sec-setup-reports -}\n\nFor reference, here are the packages we will use in this chapter. If running the code below in the console pane gives you the error `Error in library(package_name) : there is no package called ‘package_name’`, you may need to install them as explained in @sec-install-package.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Chapter packages\"}\nlibrary(tidyverse) # various data manipulation functions\nlibrary(quarto)    # for rendering a report from a script\n```\n:::\n\n\n## Why use reproducible reports? {#sec-reproducibility}\n\nHave you ever worked on a report, creating a summary table for the demographics, making beautiful plots, getting the analysis just right, and copying all the relevant numbers into your manuscript, only to find out that you forgot to exclude a test run and have to redo everything?\n\nA <a href='https://psyteachr.github.io/glossary/r#reproducibility' target='_blank' class='glossary' title='The extent to which the findings of a study can be repeated in some other context'>reproducible</a> report fixes this problem. Although this requires a bit of extra effort at the start, it will more than pay you back by allowing you to update your entire report with the push of a button whenever anything changes.\n\nAdditionally, studies show that many, if not most, papers in the scientific literature have reporting errors. For example, more than half of over 250,000 psychology papers published between 1985 and 2013 have at least one value that is statistically incompatible, such as a p-value that is not possible given the reported t-value and degrees of freedom [@nuijten2016prevalence]. Reproducible reports help avoid transcription and rounding errors.\n\nWe will make reproducible reports following the principles of [literate programming](https://en.wikipedia.org/wiki/Literate_programming). The basic idea is to have the text of the report together in a single document along with the code needed to perform all analyses and generate the tables. The report is then \"compiled\" from the original format into some other, more portable format, such as HTML or PDF. This is different from traditional cutting and pasting approaches where, for instance, you create a graph in Microsoft Excel or a statistics program like SPSS and then paste it into Microsoft Word.\n\n## Projects {#sec-projects}\n\nBefore we write any code, first, we need to get organised. <a href='https://psyteachr.github.io/glossary/p#project' target='_blank' class='glossary' title='A way to organise related files in RStudio'>Projects</a> in RStudio are a way to group all the files you need for one project. Most projects include <a href='https://psyteachr.github.io/glossary/s#script' target='_blank' class='glossary' title='A plain-text file that contains commands in a coding language, such as R.'>scripts</a>, data files, and output files like images or the PDF report created by the script.\n\n### File System\n\nModern computers tend to hide the file system from users, but we need to understand a little bit about how files are stored on your computer in order to get a script to find your data. Your computer's file system is like a big box (or <a href='https://psyteachr.github.io/glossary/d#directory' target='_blank' class='glossary' title='A collection or “folder” of files on a computer.'>directory</a>) that contains both files and smaller boxes, or \"subdirectories\". You can specify the location of a file with its name and the names of all the directories it is inside.\n\nFor example, if Lisa is looking for a file called `report.qmd`on their Desktop, they can specify the full file <a href='https://psyteachr.github.io/glossary/p#path' target='_blank' class='glossary' title='A string representing the location of a file or directory.'>path</a> like this: `/Users/debruine/Desktop/report.qmd`, because the `Desktop` directory is inside the `debruine` directory, which is inside the `Users` directory, which is located at the base of the whole file system. If that file was on *your* desktop, you would probably have a different path unless your user directory is also called `debruine`. You can also use the `~` shortcut to represent the user directory of the person who is currently logged in, like this: `~/Desktop/report.qmd`.\n\n### Default working directory\n\nFirst, make a new <a href='https://psyteachr.github.io/glossary/d#directory' target='_blank' class='glossary' title='A collection or “folder” of files on a computer.'>directory</a> (i.e., folder) on your computer where you will keep all of your R projects. Name it something like \"R-projects\" (avoid spaces and other special characters). Make sure you know how to get to this directory using your computer's Finder or Explorer. \n\n::: {.callout-caution collapse=\"true\"}\n## Avoid networked drives\n\nIf possible, don't use a network or cloud drive (e.g., OneDrive or Dropbox), as this can sometimes cause problems. If you're working from a networked drive and you are having issues, a helpful test is to try moving your project folder to the desktop to see if that solves the problem.\n:::\n\nNext, open <if>Tools > Global Options...</if>, navigate to the <if>General</if> pane, and set the \"Default working directory (when not in a project)\" to this directory. Now, if you're not working in a project, any files or images you make will be saved in this <a href='https://psyteachr.github.io/glossary/w#working-directory' target='_blank' class='glossary' title='The filepath where R is currently reading and writing files.'>working directory</a>. \n\n::: {.callout-caution collapse=\"true\"}\n## Avoid long path names\n\nOn some versions of Windows 10 and 11, it can cause problems if path names are longer than 260 characters. Set your default working directory to a path with a length well below that to avoid problems when R creates temporary files while rendering a report. If you are having issues, a helpful test is to try moving your project folder to the desktop to see if that solves the problem as this will likely have a much shorter path name than most other folders on your computer.\n:::\n\nYou can set the working directory to another location manually with menu commands: <if>Session > Set Working Directory > Choose Directory...</if> However, there's a better way of organising your files by using Projects in RStudio.\n\n\n### Start a Project {#sec-project-start}\n\nTo create a new project for the work we'll do in this book:\n\n* <if>File > New Project...</if>\n* Select <if>New Directory</if>\n* Select <if>New Project</if>\n* Name the project <code class='path'>reprores</code>\n* Save it inside the default `R-projects` directory\n* Click <if>Create Project</if>\n\nRStudio will restart itself and open with this new project directory as the working directory.\n\n::: {#fig-new-proj layout-ncol=3}\n\n![](images/reports/new_proj_1.png){fig-alt=\"Interface box titled New Project Wizard. The heading is Create Project and there are three options: New Directory: start a project in a brand new working directory, Existing Directory: Associate a project with an existing directory, and Version Control: Checkout a project from a version control repository\"}\n\n![](images/reports/new_proj_2.png){fig-alt=\"Next page of the New Project Wizard interface. There is a back button and the heading Project Type. There are 7 optins: New Project, R Package, Shiny Application, Quarto Project, Quarto Website, Quarto Blog, and Quarto Book. The first option is highlighted with the help text `Create a new project in an empty directory.'\"}\n\n![](images/reports/new_proj_3.png){fig-alt=\"Next page of the New Project Wizard interface. There is a back button and the heading Create New Project. There is a text box labelled 'Directory name' with the contents 'reprores' and another with the label 'Create project as a subdirectory of:` and the contents '/Users/debruine/R-projects' next to a Browse... button. There are two tickboxes (both unselected) labelled 'Create a git repository' and 'Use renv with this project'.\"}\n\nStarting a new project.\n:::\n\nClick on the Files tab in the lower right pane to see the contents of the project directory. You will see a file called `reprores.Rproj`, which is a file that contains all of the project information. When you're in the Finder/Explorer, you can double-click on it to open up the project.\n\n::: {.callout-note}\n## Dot files\n\nDepending on your settings, you may also see a directory called `.Rproj.user`, which contains your specific user settings. You can ignore this and other \"invisible\" files that start with a full stop.\n:::\n\n::: {.callout-caution}\n## Don't nest projects\n\nDon't ever save a new project **inside** another project directory. This can cause some hard-to-identify problems.\n:::\n\n### Naming things {#sec-naming}\n\nBefore we start creating new files, it's important to review how to name your files. This might seem a bit pedantic, but following clear naming rules so that both people and computers can easily find things will make your life much easier in the long run. Here are some important principles:\n\n-   file and directory names should only contain letters, numbers, dashes, and underscores, with a full stop (`.`) between the file name and <a href='https://psyteachr.github.io/glossary/e#extension' target='_blank' class='glossary' title='The end part of a file name that tells you what type of file it is (e.g., .R or .Rmd).'>extension</a> (that means no spaces!)\n-   be consistent with capitalisation (set a rule to make it easy to remember, like always use lowercase)\n-   use underscores (`_`) to separate parts of the file name, like the title and date, and dashes (`-`) to separate words in each part (e.g., `thesis-analysis_2024-10-31.Rmd`)\n-   name files with a pattern that alphabetises in a sensible order and makes it easy for you to find the file you're looking for\n-   prefix a file name with an underscore to move it to the top of the list, or prefix all files with numbers to control their order\n\nFor example, these file names are a mess:\n\n-   <code class='path'>report.doc</code>\n-   <code class='path'>report final.doc</code>\n-   <code class='path'>Data (Customers) 11-15.xls</code>\n-   <code class='path'>Customers Data Nov 12.xls</code>\n-   <code class='path'>final report2.doc</code>\n-   <code class='path'>project notes.txt</code>\n-   <code class='path'>Vendor Data November 15.xls</code>\n\nHere is one way to structure them so that similar files have the same structure and it's easy for a human to scan the list or to use code to find relevant files. See if you can figure out what the last one should be.\n\n-   <code class='path'>_project-notes.txt</code>\n-   <code class='path'>report_v1.doc</code>\n-   <code class='path'>report_v2.doc</code>\n-   <code class='path'>report_v3.doc</code>\n-   <code class='path'>data_customer_2021-11-12.xls</code>\n-   <code class='path'>data_customer_2021-11-15.xls</code>\n-   <select class='webex-select'><option value='blank'></option><option value=''>vendor-data_2021-11-15.xls</option><option value=''>data-vendor-2021_11_15.xls</option><option value='answer'>data_vendor_2021-11-15.xls</option><option value=''>data_2021-11-15_vendor.xls</option></select>\n\n::: {.try}\n## Naming practice\n\nThink of other ways to name the files above. Look at some of your own project files and see what you can improve.\n:::\n\n## Quarto {#sec-quarto}\n\nThroughout this course we will use <a href='https://psyteachr.github.io/glossary/q#quarto' target='_blank' class='glossary' title='An open-source scientific and technical publishing system.'>quarto</a> to create reproducible reports with a table of contents, text, tables, images, and code. The text can be written using <a href='https://psyteachr.github.io/glossary/m#markdown' target='_blank' class='glossary' title='A way to specify formatting, such as headers, paragraphs, lists, bolding, and links.'>markdown</a>, which is a way to specify formatting, such as headers, paragraphs, lists, bolding, and links. Code is placed in <a href='https://psyteachr.github.io/glossary/c#chunk' target='_blank' class='glossary' title='A section of code in an R Markdown file'>code chunks</a>.\n\n:::{.callout-note}\n## Quarto vs R Markdown\n\nYou may have learned <a href='https://psyteachr.github.io/glossary/r#r-markdown' target='_blank' class='glossary' title='The R-specific version of markdown: a way to specify formatting, such as headers, paragraphs, lists, bolding, and links, as well as code blocks and inline code.'>R Markdown</a> in other classes, or see .Rmd files in other people's projects. Quarto is basically a newer and more general version of R Markdown, with many improvements. The formatting is very similar, and you can often convert R Markdown files by changing the file extension from .Rmd to .qmd with no or very few other changes. \n:::\n\n### New document {#sec-quarto-newdoc}\n\nTo open a new quarto document, click <if>File > New File > Quarto Document...</if>. You will be prompted to give it a title; title it `Reports`. You can also change the author name. Keep the output format as HTML. Save the file as <code class='path'>02-reports.qmd</code>.\n\n::: {.callout-warning collapse=\"true\"}\n## Source versus visual editor\n\nYou can use the visual editor if you have RStudio version 1.4 or higher. This will be a button at the top of the source pane and the menu options should be very familiar to anyone who has worked with software like Microsoft Word. However, **the examples in the rest of this book are shown for the source editor**, not the visual editor, so delete the line `editor: visual` if needed.\n\nIn the visual editor, you won't see the hashes that create headers, or the asterisks that create bold and italic text. You also won't see the backticks that demarcate inline code.\n\n![The example code above shown in the visual editor.](images/reports/visual-editor-example.png){#fig-visual-editor-example fig-alt=\"The visual editor shows the code in a grey box starting with {r} and then the main text is styles so 'Inline Code' is larger and bold.\"}\n\nIf you try to add the hashes, asterisks and backticks to the visual editor, you will get frustrated as they disappear. If you succeed, your text in the regular editor will be full of backslashes and the code will not run.\n:::\n\n### Header\n\nAt the top of the file, you will see some text between a pair of three dashes:\n\n``` yaml\n---\ntitle: \"Reports\"\nauthor: \"Lisa DeBruine\"\nformat: html\n---\n```\n\nThis is the <a href='https://psyteachr.github.io/glossary/y#yaml' target='_blank' class='glossary' title='A structured format for information'>YAML</a> header, which provides information to quarto about how you want to render a document. Here, it sets the title, author, and format. Add a new line with the date, e.g., `date: 2025-10-03`.\n\nYou will learn in @sec-yaml how to further customise your document using information in the header.\n\n### Markdown {#sec-markdown}\n\nNow replace all of the text beneath the header with the following text. Make sure to skip a line or two after the three dashes.\n\n``` markdown\n## Basic Markdown\n\nNow I can make:\n\n* headers\n* paragraphs\n* lists\n* [links](https://psyteachr.github.io/reprores-v5/)\n\n```\n\nIf you start a line with hashes, it creates a header. One hash makes a document title, two hashes make a document header, three a subheader, and so on. Make sure you leave a blank line before and after a header, and don't put any spaces or other characters before the first hash. \nPut a blank line between paragraphs of text. Bullet-point list items start with \"* \" or \"- \" and numbered list items start with \"1. \". Indent list items to make nested lists.\n\n\n### Text Styles\n\nSee [Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html) for a quick reference.\n\n:::{.try}\nAdd an ordered list of different text styles to your document, like bold, italic, strikethrough, subscript, superscript, code, and a task item.\n:::\n\n### Code chunks {#sec-code-chunks}\n\n::: {.try}\nAdd a new level-2 header called \"Code Chunks\", skip a line, and add the following text at the end:\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# this is a code chunk\n```\n````\n:::\n\n:::\n\nWhat you have created is a <a href='https://psyteachr.github.io/glossary/c#chunk' target='_blank' class='glossary' title='A section of code in an R Markdown file'>code chunk</a>. In quarto, anything written between lines that start with three backticks is processed as code, and anything written outside is processed as markdown. This makes it easy to combine both text and code in one document. On the default RStudio appearance theme, code chunks are grey and plain text is white, but the actual colours will depend on which theme you have applied.\n\n::: {.callout-caution}\n## Code chunk errors\n\nWhen you create a new code chunk you should notice that the grey box starts and ends with three backticks \\`\\`\\`. One common mistake is to accidentally delete these backticks. Remember, code chunks and text entry are different colours - if the colour of certain parts of your script doesn't look right, check that you haven't deleted the backticks.\n:::\n\n\n::: {.try}\nInside your code chunk, add the code you created in @sec-objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- \"Lisa\"\nage <- 48\ntoday <- Sys.Date()\nhalloween <- as.Date(\"2025-10-31\")\n```\n:::\n\n:::\n\n::: {.callout-note}\n## Console vs scripts\n\nIn @sec-intro, we asked you to type code into the console. Now, we want you to put code into code chunks in quarto files to make the code reproducible. This way, you can re-run your code any time the data changes to update the report, and you or others can inspect the code to identify and fix any errors. \n\nHowever, there will still be times that you need to put code in the console instead of in a script, such as when you install a new package. In this book, code chunks will be labelled with whether you should run them in the console or add the code to a script.\n:::\n\n### Running code\n\nWhen you're working in a quarto document, there are several ways to run your lines of code.\n\nFirst, you can highlight the code you want to run and then click <if>Run > Run Selected Line(s)</if>, however this is tedious and can cause problems if you don't highlight *exactly* the code you want to run.\n\nAlternatively, you can press the green \"play\" button at the top-right of the code chunk and this will run **all** lines of code in that chunk.\n\n![Click the green arrow to run all the code in the current chunk.](images/reports/run-current.png){#fig-run-current fig-alt=\"A sreenshot of the code above in the RStudio interface, highlighting the green arrow on the right and helper text reading 'Run Current Chunk'.\"}\n\nEven better is to learn some of the keyboard shortcuts for RStudio. To run a single line of code, make sure that the cursor is in the line of code you want to run (it can be anywhere, just not selecting any characters) and press <pc>Ctrl+Enter</pc> or <mac>Cmd+Enter</mac>. If you want to run all of the code in the code chunk, press <pc>Ctrl+Shift+Enter</pc> or <mac>Cmd+Shift+Enter</mac>. Learn these short cuts; they will make your life easier!\n\n![Use the keyboard shortcut to run only highlighted code, or run one line at a time by placing the cursor on a line without highlighting anything.](images/reports/run-line.mov){#fig-run-line fig-alt=\"A movie showing how to place the cursor without selecting to run one line.\"}\n\n::: {.try}\nRun your code using each of the methods above. You should see the variables `name`, `age`, `today`, and `halloween` appear in the environment pane. \n\nRestart R to clear the objects. They should disappear from the environment (see @sec-rstudio-settings if they don't disappear). \n\nRun your code again, and then change the value of `name` in the script. When/how does it change in the Environment tab? \n:::\n\n### Inline code {#sec-inline-r}\n\nOne important feature of quarto for reproducible reports is that you can combine text and code to insert values into your writing using **inline coding**. If you've ever had to copy and paste a value or text from one file to another, you'll know how easy it can be to make mistakes. Inline code avoids this. \n\n::: {.try}\n\nAdd a new level-2 header called \"Inline Code\", then copy and paste the text below. If you used a different variable name than `halloween`, you should update this with the name of the object you created, but otherwise don't change anything else.\n\n``` markdown\nMy name is Lisa and I am 48 years old. \nIt is 45 days until Halloween, \nwhich is my favourite holiday.\n```\n\n:::\n\n### Rendering your file {#sec-render}\n\nNow we are going to <a href='https://psyteachr.github.io/glossary/r#render' target='_blank' class='glossary' title='To create a file (usually an image or PDF) or widget from source code'>render</a> the file into a document type of our choosing. In this case we'll create a default html file, but you will learn how to create other files like Word and PDF in @sec-formats. To render your file, click the <if>Render</if> button at the top of the source pane.\n\nThe console pane will open a tab called \"Background Jobs\". This is because quarto is not an R package, but a separate application on your computer. You can make this application run with commands from R, or run it from the command line yourself. You may see some text in the Background Jobs window, like \"Processing file: 02-reports.qmd\" and eventually \"Output created: 02-reports.html\". Your rendered html file may pop up in a separate web browser, a pop-up window in RStudio, or in the Viewer tab of the lower right pane, depending on your RStudio settings. \n\nThat slightly odd bit of text you copied and pasted now appears as a normal sentence with the values pulled in from the objects you created.\n\n> My name is Lisa and I am 48 years old. It is 45 days until Halloween, which is my favourite holiday.\n\n::: {.callout-note collapse=\"true\"}\n## Rendering with Code\n\nYou can also render by typing the following code into the console. Never put this in a qmd script itself, or it will try to render itself in an infinite loop.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Run in the console\"}\nquarto::quarto_render(\"02-reports.qmd\")\n```\n:::\n\n:::\n\n::: {.try}\nEdit your file to put the code chunk that defines the objects `name`, `age`, `today` and `halloween` *after* the inline text that uses it and render. What happened and why?\n:::\n\n## Writing a report\n\nWe're going to write a basic report for this dataset using quarto to show you some more of the features. We'll be expanding on almost every bit of what we're about to show you throughout this course; the most important outcome is that you start to get comfortable with how quarto works and what you can use it to do. \n\n### Setup Chunk {#sec-setup-chunk}\n\nMost of your quarto documents should have a setup chunk at the top that loads any necessary libraries and sets default values. \n\n::: {.try}\nAdd the following just below the YAML header.\n\n````\n```{{r}}\n#| label: setup\n#| include: false\n\nlibrary(tidyverse)\n```\n````\n:::\n\nThe function `library(tidyverse)` makes tidyverse functions available to your script. You should always add the packages you need in your setup chunk. Often when you are working on a script, you will realize that you need to load another add-on package. Don't bury the call to `library(package_I_need)` way down in the script. Put it in the setup chunk so the user has an overview of what packages are needed.\n\n### Chunk Options\n\nThe chunk execution option `label` above designates this as the setup chunk, and the `include` option makes sure that this chunk and any output it produces don't end up in your rendered document. \n\nChunk options are structured like `#| option: value`, and go at the very top of a code chunk. You can also set default values in the YAML header under `execute:` (see @sec-execute below).  \n\n::: {.callout-warning}\nMake sure there are no blank lines, code, or comments before any chunk options, otherwise the options will not be applied.\n:::\n\n### Online sources {#sec-loading-online}\n\nNow, rather than using objects we have created from scratch, we will read in a data file. First, let's try loading data that is stored online. \n\n::: {.try}\nCreate a new level 2 header called \"Data Analysis\", add a code chunk below it, and copy, paste, and run the below code. This code loads some simulated experiment data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmalldata <- read_csv(\"https://psyteachr.github.io/reprores/data/smalldata.csv\")\n```\n:::\n\n\n:::\n\n- The data is stored in a `.csv` file so we're going to use the `read_csv()` function to load it in.\n- Note that the url is contained within double quotation marks - it won't work without this.\n- You should see a message that starts with \"Rows: 10 Columns: 4\", you can ignore this for now.                                                                   \n\n\n::: {.callout-warning}\n## Could not find function\n\nIf you get an error message that looks like:\n\n> Error in read_csv(\"https://psyteachr.github.io/reprores/data/smalldata.csv\") :  \n>  could not find function \"read_csv\"\n\nThis means that you have not loaded tidyverse. Check that `library(tidyverse)` is in the setup chunk and that you have run the setup chunk.\n:::\n\nThis dataset is a few lines of simulated data for an experiment with 10 participants, 2 groups (experimental and control) and two dependent measures (pre and post). There are multiple ways to view and check a dataset in R. Do each of the following and make a note of what information each approach gives you. If you'd like more information about each of these functions, you can look up the help documentation with `?function`:\n\nClick on the `smalldata` object in the environment pane and run each of the following lines of code in the console:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Run in the console\"}\n# different ways to view a data frame\nhead(smalldata)\nsummary(smalldata)\nstr(smalldata)\nView(smalldata)\n```\n:::\n\n\n### Local data files\n\nMore commonly, you will be working from data files that are stored locally on your computer. But where should you put all of your files? You usually want to have all your scripts and data files for a single project inside one folder on your computer, that project's <a href='https://psyteachr.github.io/glossary/w#working-directory' target='_blank' class='glossary' title='The filepath where R is currently reading and writing files.'>working directory</a>, and we have already set up the main directory <code class='path'>reprores</code> for this course.\n\nYou can organise files in subdirectories inside this main project directory, such as putting all raw data files in a subdirectory called <code class='path'>data</code> and saving any image files to a subdirectory called <code class='path'>images</code>. Using subdirectories helps avoid one single folder becoming too cluttered, which is important when you're working on big projects.\n\nIn your <code class='path'>reprores</code> directory, create a new folder named <code class='path'>data</code>, [download a copy of the data file](https://psyteachr.github.io/reprores/data/smalldata.csv){download=\"\"}, and save it in this new subdirectory. Or you can run the following code in the console (do not add it to the script or you will unnecessarily download data every time you run it).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Run in the console\"}\ndir.create(path = \"data\", showWarnings = FALSE)\nurl <- \"https://psyteachr.github.io/reprores/data/smalldata.csv\"\ndownload.file(url = url, destfile = \"data/smalldata.csv\")\n```\n:::\n\n\n\nTo load in data from a local file, again we can use the `read_csv()` function, but this time rather than specifying a url, give it the subdirectory and file name. \n\n::: {.try}\nChange the code in your file to the following.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmalldata <- read_csv(\"data/smalldata.csv\")\n```\n:::\n\n:::\n\n::: {.callout-tip}\n## Tab-autocomplete file names\n\nUse tab auto-complete when typing file names in a code chunk. After you type the first quote, hit tab to see a drop-down menu of the files in your working directory. You can start typing the name of the subdirectory or file to narrow it down. This is really useful for avoiding annoying errors because of typos or files not being where you expect.\n:::\n\nThings to note:\n\n-   You must include the file extension (in this case `.csv`)\n-   The subdirectory folder name (`data`) and the file name are separated by a forward slash `/` (even on Windows!)\n-   Precision is important, if you have a typo in the file name it won't be able to find your file; remember that R is case sensitive -- `SmallData.csv` is a completely different file to `smalldata.csv` as far as R is concerned.\n\n::: {.try}\nRun `head()`, `summary()`, `str()`, and `View()` on `smalldata` to confirm that the data is the same as before.\n:::\n\n### Data analysis\n\nFor this report we're just going to present some simple stats for two groups: \"control\" and \"exp\". We'll come back to how to write this kind of code yourself in @sec-summary. For now, see if you can follow the logic of what the code is doing via the code comments.\n\n::: {.try}\nCreate a new code chunk, then copy, paste and run the following code and then view `group_counts` by clicking on the object in the environment pane.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# count how many are in each group\ngroup_counts <- count(smalldata, group)\n```\n:::\n\n:::\n\nBecause each row of the dataset is a participant, this code gives us a nice and easy way of seeing how many participants were in each group; it just counts the number of rows in each group.\n\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|group   |  n|\n|:-------|--:|\n|control |  5|\n|exp     |  5|\n\n</div>\n:::\n:::\n\n\n::: {.try}\nCopy and paste the text below into the white space below the code chunk that loads in the data. Save the file and then render to view the results.\n\n``` md\nThe total number of participants in the **control** condition was 5.\n```\n:::\n\nTry and match up the inline code with what is in the `group_counts` table. Of note:\n\n* The `$` sign is used to indicate specific variables (or columns)  in an object using the `object$variable` syntax. \n* Square brackets with a number e.g., `[1]`, indicate a particular observation\n* So `group_counts$n[1]` asks the inline code to display the first observation of the variable `n` in the dataset `group_counts`.\n\n::: {.try}\nAdd another line that reports the total numbers of participants in the **experimental** condition using inline code. Using either the visual editor or text markups, add in bold and italics so that it matches the others.\n\n\n<div class='webex-solution'><button>Solution</button>\n\n``` markdown\nThe total number of participants in the **experimental** condition was 5.\n```\n\n</div>\n\n\n:::\n\n### Code comments {#sec-comments}\n\nIn the above code we've used code <a href='https://psyteachr.github.io/glossary/c#comment' target='_blank' class='glossary' title='Comments are text that R will not run as code. You can annotate .R files or chunks in R Markdown files with comments by prefacing each line of the comment with one or more hash symbols (#).'>comments</a> and it's important to highlight how useful these are. You can add comments inside R chunks with the hash symbol (`#`). R will ignore characters from the hash to the end of the line.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# important numbers\n\nn <- nrow(smalldata) # the total number of participants (number of rows)\npre <- mean(smalldata$pre) # the mean of the pre column\npost <- mean(smalldata$post) # the mean of the post column\n```\n:::\n\n\nIt's usually good practice to start a code chunk with a comment that explains what you're doing there, especially if the code is not explained in the text of the report.\n\nIf you name your objects clearly, you often don't need to add clarifying comments. For example, if I'd named the three objects above `total_participants`, `mean_pre` and `mean_post`, I would omit the comments. It's a bit of an art to comment your code well, but try to add comments as you're working through this book -- it will help consolidate your learning and when future you comes to review your code, you'll thank past you for being so clear.\n\n### Images {#sec-md-images}\n\nAs the saying goes, a picture paints a thousand words, and sometimes you will want to communicate your data using visualisations. \n\nCreate a code chunk to display a graph of the data in your document after the text we've written so far. We'll use some code that you'll learn more about in @sec-viz to make a simple bar chart that represents the data -- focus on trying to follow how bits of the code map on to the plot that is created.\n\n::: {.try}\nAdd a new level-3 header called \"Visualisation\". Copy and paste the code below into a new chunk. Run the code in your script to see the plot it creates and then render the file to see how it is displayed in your document.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = smalldata, \n       mapping = aes(x = pre, \n                     y = post, \n                     color = group)) +\n  geom_point() +\n  labs(x = \"Pre-test Score\",\n       y = \"Post-test Score\")\n```\n\n::: {.cell-output-display}\n![](images/figures/smalldata-fig-1.png){fig-alt='A plot with pre-test score on the x-axis and post-test score on the y-axis, both running about 70 to 130. The control group is represented by red ddots, the experiemntal group by blue. There are 5 dots of each, with what looks like a positive relationship.' width=100%}\n:::\n:::\n\n\n:::\n\nYou can also include images that you did not create in R using the markdown syntax for images. This is very similar to loading data in that you can either use an image that is stored on your computer, or via a url.  \n\nThe general syntax for adding an image in markdown is `![caption](url){#fig-name}`. You can leave the caption blank, but must include the square brackets. The curly brackets are optional, and allow you to reference the figure as `@fig-name` (change the \"name\" part for each new figure). You can also add other formatting options in the curly brackets, like an image width or CSS styles. Alt-text for screen readers is an important thing to add to any image for accessibility.\n\n``` md\n![The ReproRes logo](images/logos/logo.png){#fig-logo width=\"33%\" fig-alt=\"A blue hexagon with the words 'Repro' and 'RES'\"}\n```\n\n![The ReproRes logo](images/logos/logo.png){#fig-logo width=\"33%\" fig-alt=\"A blue hexagon with the words 'Repro' and 'RES'\"}\n\n\nIf you have a lot of customisations, you may prefer to show images from a code block like this. Note that here, `width` and `height` are called `out-width` and `out-height` to distinguish them from a generated image's rendered dimensions (controlled by `fig-width` and `fig-height`).\n\n\n::: {.cell .fig-cap-location-top layout-align=\"right\"}\n\n````{.cell-code}\n```{{r}}\n#| label: fig-psyteachr-logo\n#| fig-alt: \"The word #PsyTeachR in rainbow letters, and smaller letters after the R spelling Reproducible Research\"\n#| fig-align: right\n#| out-width: \"50%\"\n#| fig-link: https://psyteachr.github.io\n#| fig-cap: \"PsyTeachR is a group of psychologists at the University of Glasgow who create open source teaching materials.\"\n#| fig-cap-location: top\nknitr::include_graphics(\"images/logos/psyTeachR_logo.png\", )\n```\n````\n\n::: {.cell-output-display}\n[![PsyTeachR is a group of psychologists at the University of Glasgow who create open source teaching materials.](images/logos/psyTeachR_logo.png){#fig-psyteachr-logo fig-align='right' fig-alt='The word #PsyTeachR in rainbow letters, and smaller letters after the R spelling Reproducible Research' width=50%}](https://psyteachr.github.io)\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Image Licenses\n\nMost images on Wikipedia are public domain or have an open license. You can search for images by license on Google Images by clicking on the <if>Tools</if> button and choosing \"Creative Commons licenses\" from the \"Usage Rights\" menu.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/reports/google-images.png){fig-alt='Screenshot of Google Images interface with Usage Rights selections open.' width=100%}\n:::\n:::\n\n:::\n\n### Tables {#sec-md-tables}\n\nRather than a figure, we might want to display our data in a table. \n\n::: {.try}\nAdd a new level 3 heading to your document, name the heading \"Tables\" and then create a new code chunk below this. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmalldata\n```\n:::\n\n::: \n\nFirst, let's see what the table looks like if we don't make any edits. Simply write the name of the table you want to display in the code chunk (in our case `smalldata`) and then render to see what it looks like.\n\n\n\n```\n# A tibble: 10 × 4\n   id    group     pre  post\n   <chr> <chr>   <dbl> <dbl>\n 1 S01   control  98.5 107. \n 2 S02   control 104.   89.1\n 3 S03   control 105.  124. \n 4 S04   control  92.4  70.7\n 5 S05   control 124.  125. \n 6 S06   exp      97.5 102. \n 7 S07   exp      87.8 126. \n 8 S08   exp      77.2  72.3\n 9 S09   exp      97.0 109. \n10 S10   exp     102.  114. \n```\n\nThis isn't very pretty, but we can change the print style. \n\n::: {.try}\nChange the line `format: html` in the YAML header to the following. \n\n\n``` md\n---\nformat: \n  html:\n    df-print: kable\n---\n```\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|id  |group   |       pre|      post|\n|:---|:-------|---------:|---------:|\n|S01 |control |  98.46606| 106.70508|\n|S02 |control | 104.39774|  89.09030|\n|S03 |control | 105.13377| 123.67230|\n|S04 |control |  92.42574|  70.70178|\n|S05 |control | 123.53268| 124.95526|\n|S06 |exp     |  97.48676| 101.61697|\n|S07 |exp     |  87.75594| 126.30077|\n|S08 |exp     |  77.15375|  72.31229|\n|S09 |exp     |  97.00283| 108.80713|\n|S10 |exp     | 102.32338| 113.74732|\n\n</div>\n:::\n:::\n\n\n::: {.callout-warning}\nMake sure to keep the spaces exactly the same (YAML is very picky about spaces). In YAML, if a `key: value` pair doesn't have any sub-options, you can write it on one line, like `format: html`. But if you want to set any html options, you have to indent it like above.\n:::\n\n\n### Cross references {#sec-cross-references}\n\nYou can automatically number your figures and tables by giving them labels that start with `fig-` or `tbl-`, and referring to them in the text like `@fig-name` or `@tbl-name` (see [quarto cross references](https://quarto.org/docs/authoring/cross-references.html) for more details).\n\n::: {.try}\nAdd the following text above the chunk containing the table:\n\n``` markdown\nAll data are shown in @tbl-raw-data.\n```\n\nAlso, add the two commented lines below to the top of the code chunk:\n\n``` yaml\n#| label: tbl-raw-data\n#| tbl-cap: The raw data from the study.\n```\n:::\n\nThese set the figure label so you can reference it in the document, and the table caption. The label must start with \"tbl-\" to automatically add it to the numbered list of tables. Now, when you render your document, tables will display in \"kable\" format, which looks much nicer. \n\nAll data are shown in @tbl-raw-data2.\n\n\n::: {#tbl-raw-data2 .cell tbl-cap='The raw data from the study.'}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|id  |group   |       pre|      post|\n|:---|:-------|---------:|---------:|\n|S01 |control |  98.46606| 106.70508|\n|S02 |control | 104.39774|  89.09030|\n|S03 |control | 105.13377| 123.67230|\n|S04 |control |  92.42574|  70.70178|\n|S05 |control | 123.53268| 124.95526|\n|S06 |exp     |  97.48676| 101.61697|\n|S07 |exp     |  87.75594| 126.30077|\n|S08 |exp     |  77.15375|  72.31229|\n|S09 |exp     |  97.00283| 108.80713|\n|S10 |exp     | 102.32338| 113.74732|\n\n</div>\n:::\n:::\n\n\n\n::: {.callout-note collapse=\"true\"}\n## Advanced table customisation\n\nIf you're feeling confident with what we have covered so far, you can do even fancier formatting with the <pkg>flextable</pkg> package (see @sec-tables).\n:::\n\n\n\n## Refining your report\n\n### Execution defaults {#sec-execute}\n\nLet's finish by tidying up the report and organising our code a bit better. \n\nYou can set more default options for your document in the YAML header. The help pages for [quarto execution options](https://quarto.org/docs/computations/execution-options.html) has a full list of options. However, the most useful and common options to change for the purposes of writing reports revolve around whether you want to show your code and the size of your images.\n\nAdd the code below to your YAML header and then try changing each option from `false` to `true` and changing the numeric values then render the file again to see the difference it makes.\n\n``` yaml\n---\nexecute:\n  echo: false     # whether to show code chunks\n  message: false  # whether to show messages from your code\n  warning: false  # whether to show warnings from your code\n  fig-width: 8    # figure width in inches (at 96 dpi)\n  fig-height: 5   # figure height in inches (at 96 dpi)\n---\n```\n\nYou can also override defaults in a code cell. See [quarto code cells help](https://quarto.org/docs/reference/cells/cells-knitr.html) for a full list of options.\n\n\n\n::: {.callout-warning collapse=\"true\"}\n## Figure versus output dimensions\n\nNote that `fig-width` and `fig-height` control the original size and aspect ratio of images generated by R, such as plots. This will affect the relative size of text and other elements in plots. It does not affect the size of existing images at all. However, `out-width` controls the **display** size of both existing images and figures generated by R. This is usually set as a percentage of the page width.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: fig-full-100\n#| fig-width: 8\n#| fig-height: 5\n#| out-width: '100%'\n#| fig-cap: A plot with the default values\nggplot2::last_plot()\n```\n````\n\n::: {.cell-output-display}\n![A plot with the default values](images/figures/fig-full-100-1.png){#fig-full-100 width=100%}\n:::\n:::\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: fig-half-100\n#| fig-width: 4\n#| fig-height: 2.5\n#| out-width: '100%'\n#| fig-cap: The same plot with half the default width and height\n\nggplot2::last_plot()\n```\n````\n\n::: {.cell-output-display}\n![The same plot with half the default width and height](images/figures/fig-half-100-1.png){#fig-half-100 width=100%}\n:::\n:::\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: fig-half-50\n#| fig-width: 4\n#| fig-height: 2.5\n#| out-width: '50%'\n#| fig-cap: The same plot as above at half the output width\nggplot2::last_plot()\n```\n````\n\n::: {.cell-output-display}\n![The same plot as above at half the output width](images/figures/fig-half-50-1.png){#fig-half-50 width=50%}\n:::\n:::\n\n\n:::\n\n### Override defaults\n\nThese setup options change the behaviour for the entire document, however, you can override the behaviour for individual code chunks. \n\nFor example, by default you might want to hide your code but there also might be an occasion where you want to show the code you used to analyse your data. You can set `echo = FALSE` in your setup chunk to make hiding code the default but in the individual code chunk for your plot set `echo = TRUE`. Try this now and knit the file to see the results.\n\nAdditionally, you can also override the default image display size or dimensions.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: fig-change-height\n#| fig-width: 10\n#| fig-height: 5\nggplot(data = smalldata, \n       mapping = aes(x = pre, \n                     y = post, \n                     color = group)) +\n  geom_point() +\n  labs(x = \"Pre-test Score\",\n       y = \"Post-test Score\",\n       title = \"Relationship between pre- and post-test by group\")\n```\n````\n\n::: {.cell-output-display}\n![](images/figures/fig-change-height-1.png){#fig-change-height width=100%}\n:::\n:::\n\n\n\n### YAML options {#sec-yaml}\n\nFinally, the <a href='https://psyteachr.github.io/glossary/y#yaml' target='_blank' class='glossary' title='A structured format for information'>YAML</a> header is the bit at the very top of your quarto document. You can set several options here as well. See the [quarto HTML reference](https://quarto.org/docs/reference/formats/html.html) for more options.\n\n::: {.callout-note}\n\nUpdate the format section. Try changing the values from `false` to `true` to see what the options do.\n\n``` md\n---\nformat:\n  html:\n    df-print: paged\n    theme: superhero\n    toc: true\n---\n```\n:::\n\nThe `df-print: paged` option prints data frames using `rmarkdown::paged_table()` automatically. You can use `df_print: kable` to default to the simple kable style.\n\nThe built-in bootswatch themes are: default, cerulean, cosmo, darkly, flatly, journal, lumen, paper, readable, sandstone, simplex, spacelab, united, and yeti. You can [view and download more themes](https://bootswatch.com/4/). Try changing the theme to see which one you like best.\n\n\n![Light themes in versions 3 and 4.](images/reports/bootswatch.png){#fig-bootswatch fig-alt=\"A 6x4 grid showing the same text with headers and bullet points in 24 different themes.\"}\n\n::: {.callout-warning}\n## YAML formatting\n\nYAML headers can be very picky about spaces and semicolons (the rest of R Markdown is much more forgiving). For example, if you put a space before \"author\", you will get an error that looks like:\n\n```\nError in yaml::yaml.load(..., eval.expr = TRUE) : \n  Parser error: while parsing a block mapping at line 1, \n  column 1 did not find expected key at line 2, column 2\n```\n\nThe error message will tell you exactly where the problem is (the second character of the second line of the YAML header), and it's usually a matter of fixing typos or making sure that the indenting is exactly right.\n:::\n\n### Table of Contents {#sec-toc}\n\nThe table of contents is created by setting `toc: true`. This will use the markdown header structure to create the table of contents. The option `toc-depth: 3` means that the table of contents will only display headers up to level 3 (i.e., those that start with three hashes: `###`), and `toc-expand` sets whether the sections are expanded or collapsed. \n\n::: {.try}\nTry changing the values of the toc settings and re-render. \n\n``` yaml\n---\nformat:\n  html:\n    toc: true\n    toc-depth: 3\n    toc-expand: true\n---\n```\n\nAdd `{-}` after a header title to remove it from the table of contents, e.g., \n\n``` md\n## Basic Markdown {-}\n```\n::: \n\n::: {.callout-caution}\nIf your table of contents isn't showing up correctly, this probably means that your headers are not set up right. Make sure that headers have no spaces before the hashes and at least one space after the hashes. For example, `##Analysis` won't display as a header and be added to the table of contents, but `## Analysis` will.\n:::\n\n### Formats {#sec-formats}\n\nSo far we've just rendered to html. To generate PDF reports, you need to install <pkg>tinytex</pkg> [@R-tinytex] and run the following code in the console (do **not** add this to your Rmd file):\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Run in the console\"}\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex()\n```\n:::\n\n\nOnce you've done this, update your YAML heading to add a `pdf_document` section and knit a PDF document. The options for PDFs are more limited than for HTML documents, so if you just replace `html` with `pdf`, you may need to remove some options if you get an error that looks like \"Functions that produce HTML output found in document targeting PDF output.\"\n\n```  md\n---\nformat:\n  pdf:\n    df-print: kable\n    toc: TRUE\n---\n```\n\nThere are many different formats you can render your document to, from HTML and PDF, to Word, Open Office, and ePub. You can also create websites, books, and presentations with a few small changes. See the [quarto documentation](https://quarto.org/docs/output-formats/all-formats.html) for more information. \n\n## Bibliography {#sec-bibliography}\n\nThere are several ways to do in-text references and automatically generate a [bibliography](https://quarto.org/docs/authoring/citations.html) in quarto. Quarto files need to link to a BibTex or JSON file (a plain text file with references in a specific format) that contains the references you need to cite. You specify the name of this file in the YAML header, like `bibliography: refs.bib` and cite references in text using an at symbol and a shortname, like `[@tidyverse]`. You can also include a Citation Style Language (.csl) file to format your references in, for example, APA style.\n\n``` md\n---\nformat:\n  html:\n    toc: true\nbibliography: refs.bib\ncsl: apa.csl\n---\n```\n\n### Converting from reference software\n\nMost reference software like EndNote or Zotero has exporting options that can export to BibTeX format. You just need to check the shortnames in the resulting file.\n\n::: {.callout-warning}\nPlease start using a reference manager consistently through your research career. It will make your life so much easier. Zotero is probably the best one.\n:::\n\n\n::: {.try}\n1. If you don't already have one, set up a [Zotero](https://www.zotero.org/) account  \n2. Add the [connector for your web browser](https://www.zotero.org/download/) (if you're on a computer you can add browser extensions to)  \n3. Navigate to [Easing Into Open Science](https://doi.org/10.1525/collabra.18684) and add this reference to your library with the browser connector  \n4. Go to your library and make a new collection called \"Open Research\" (click on the + icon after **`My Library`**)  \n5. Drag the reference to Easing Into Open Science into this collection  \n6. Export this collection as BibTex  \n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Export a bibliography file from Zotero](images/repro/zotero.png){width=100%}\n:::\n:::\n\n\nThe exported file should look like this:\n\n\n```{.bib}\n\n@article{kathawalla_easing_2021,\n\ttitle = {Easing {Into} {Open} {Science}: {A} {Guide} for {Graduate} {Students} and {Their} {Advisors}},\n\tvolume = {7},\n\tissn = {2474-7394},\n\tshorttitle = {Easing {Into} {Open} {Science}},\n\turl = {https://doi.org/10.1525/collabra.18684},\n\tdoi = {10.1525/collabra.18684},\n\tabstract = {This article provides a roadmap to assist graduate students and their advisors to engage in open science practices. We suggest eight open science practices that novice graduate students could begin adopting today. The topics we cover include journal clubs, project workflow, preprints, reproducible code, data sharing, transparent writing, preregistration, and registered reports. To address concerns about not knowing how to engage in open science practices, we provide a difficulty rating of each behavior (easy, medium, difficult), present them in order of suggested adoption, and follow the format of what, why, how, and worries. We give graduate students ideas on how to approach conversations with their advisors/collaborators, ideas on how to integrate open science practices within the graduate school framework, and specific resources on how to engage with each behavior. We emphasize that engaging in open science behaviors need not be an all or nothing approach, but rather graduate students can engage with any number of the behaviors outlined.},\n\tnumber = {1},\n\turldate = {2022-09-07},\n\tjournal = {Collabra: Psychology},\n\tauthor = {Kathawalla, Ummul-Kiram and Silverstein, Priya and Syed, Moin},\n\tmonth = jan,\n\tyear = {2021},\n\tpages = {18684},\n}\n```\n\n\n### Creating a BibTeX File\n\nYou can also add references manually. \n\n::: {.try}\nIn RStudio, go to **`File`** > **`New File...`** > **`Text File`** and save the file as \"refs.bib\".\n\nAdd the line `bibliography: refs.bib` to your YAML header.\n:::\n\n### Adding references {#sec-add-refs}\n\nYou can add references to a journal article in the following format:\n\n```\n@article{shortname,\n  author = {Author One and Author Two and Author Three},\n  title = {Paper Title},\n  journal = {Journal Title},\n  volume = {vol},\n  number = {issue},\n  pages = {startpage--endpage},\n  year = {year},\n  doi = {doi}\n}\n```\n\nSee [A complete guide to the BibTeX format](https://www.bibtex.com/g/bibtex-format/) for instructions on citing books, technical reports, and more.\n\nYou can get the reference for an R package using the functions `citation()` and `toBibtex()`. You can paste the bibtex entry into your bibliography.bib file. Make sure to add a short name (e.g., \"ggplot2\") before the first comma to refer to the reference.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncitation(package=\"ggplot2\") |> toBibtex()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n@Book{,\n  author = {Hadley Wickham},\n  title = {ggplot2: Elegant Graphics for Data Analysis},\n  publisher = {Springer-Verlag New York},\n  year = {2016},\n  isbn = {978-3-319-24277-4},\n  url = {https://ggplot2.tidyverse.org},\n}\n```\n\n\n:::\n:::\n\n\n\n[Google Scholar](https://scholar.google.com/) entries have a BibTeX citation option. This is usually the easiest way to get the relevant values if you can't add a citation through the Zotero browser connector, although you have to add the DOI yourself. You can keep the suggested shortname or change it to something that makes more sense to you.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Get BibTex citations from Google Scholar.](images/present/google-scholar.png){width=100%}\n:::\n:::\n\n\n\n### Citing references {#citations}\n\nYou can cite references in text like this: \n\n``` md\nThis tutorial uses several R packages [@tidyverse;@rmarkdown].\n```\n\nThis tutorial uses several R packages [@tidyverse;@rmarkdown].\n\nPut a minus in front of the @ if you just want the year:\n\n``` md\nKathawalla and colleagues [-@kathawalla_easing_2021] explain how to introduce open research practices into your postgraduate studies.\n```\n\nKathawalla and colleagues [-@kathawalla_easing_2021] explain how to introduce open research practices into your postgraduate studies.\n\n### Uncited references\n\nIf you want to add an item to the reference section without citing, it, add it to the YAML header like this:\n\n```\nnocite: |\n  @kathawalla_easing_2021, @broman2018data, @nordmann2022data\n```\n\nOr add all of the items in the .bib file like this:\n\n```\nnocite: '@*'\n```\n\n### Citation Styles\n\nYou can search a [list of style files](https://www.zotero.org/styles) for various journals and download a file that will format your bibliography for a specific journal's style. You'll need to add the line `csl: filename.csl` to your YAML header. \n\nDownload the [apa.csl](include/apa.csl){download=\"apa.csl\"} file for APA style citations.\n\n::: {.try}\nAdd some citations to your refs.bib file, reference them in your text, and render your manuscript to see the automatically generated reference section. Try a few different citation style files.\n:::\n\n### Reference Section\n\nBy default, the reference section is added to the end of the document. If you want to change the position (e.g., to add figures and tables after the references), include the following where you want the references:\n\n``` md\n::: {#refs}\n:::\n```\n\n::: {.try}\nAdd in-text citations and a reference list to your report.\n:::\n\n## Summary {#sec-reports-summary}\n\nThis chapter has covered a lot, but hopefully now you have a much better idea of what quarto is able to do. Whilst working in quarto and markdown takes longer in the initial set-up stage, once you have a fully reproducible report you can plug in new data each week or month and simply render, reducing duplication of effort, and the human error that comes with it.\n\nYou can access a [working quarto file](demos/02-reports.qmd){download=\"02-reports.qmd\"} with the code from the example above to compare to your own code.\n\nAs you continue to work through the book you will learn how to wrangle and analyse your data and how to use quarto to present it. We'll slowly build on the available customisation options so over the course of next few weeks, you'll find your quarto reports start to look more polished and professional.\n\n\n## Exercises {#sec-exercises-reports}\n\n### Create a Project\n\nCreate a new project called \"cv\" ([@sec-projects]).\n\n### Create a New Script\n\nIn the \"cv\" project, create a new quarto document called \"cv.qmd\" ([@sec-quarto-newdoc]). Edit the YAML header to print data frames using kable and set a custom theme ([@sec-yaml]).\n\n\n<div class='webex-solution'><button>Solution</button>\n\n``` yaml\n---\ntitle: \"CV\"\nauthor: \"Me\"\nformat:\n  html:\n    df-print: kable\n    theme: cosmo\n---\n```\n\n</div>\n\n\n### Markdown Practice\n\nWrite a short paragraph describing you and your work or academic aspirations. Include a bullet-point list of links to related websites ([@sec-markdown]).\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n```\nI am a research psychologist who is interested in open science \nand teaching computational skills.\n\n* [psyTeachR books](https://psyteachr.github.io/)\n* [Google Scholar](https://scholar.google.com/)\n```\n\n\n</div>\n\n\n### Add a Table\n\nMake a subheading titled \"Education\" and use the following code to load a small table of your education ([@sec-code-chunks]). Edit it to be relevant to you (you can change the categories entirely if you want).  \n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ntibble::tribble(\n  ~degree, ~topic, ~school, ~year,\n  \"BSc\", \"BioPsych/AnthroZoo\", \"University of Michigan\", \"1998\",\n  \"MSc\", \"Biology\", \"University of Michigan\", \"2000\",\n  \"GradCert\", \"Women's Studies\", \"University of Michigan\", \"2000\",\n  \"PhD\", \"Psychology\", \"McMaster University\", \"2004\"\n)\n```\n````\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|degree   |topic              |school                 |year |\n|:--------|:------------------|:----------------------|:----|\n|BSc      |BioPsych/AnthroZoo |University of Michigan |1998 |\n|MSc      |Biology            |University of Michigan |2000 |\n|GradCert |Women's Studies    |University of Michigan |2000 |\n|PhD      |Psychology         |McMaster University    |2004 |\n\n</div>\n:::\n:::\n\n\n\n### Code Execution\n\nFigure out how to make it so that code chunks don't show in your rendered document ([@sec-execute]).\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\nYou can set the execution default to `echo: false` in the YAML header at the top of the script.\n\n``` yaml\n---\nexecute:\n  echo: false\n---\n```\n\nTo set visibility for a specific code chunk, put `#| echo: false` at the top of the code chunk.\n\n\n</div>\n\n\n### Add an Image\n\nAdd an image of anything relevant ([@sec-md-images]). Make sure to add alt-text.\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\nYou can add an image from the web using its URL:\n\n``` markdown\n![ReproRes](https://psyteachr.github.io/images/reprores.png){width=\"200px\" fig-alt=\"A blue hexagon with the words 'Repro' and 'RES'\"}\n```\n    \nOr save an image into your project directory (e.g., in the images folder) and add it using the relative path:\n\n``` markdown\n![ReproRes](images/logos/logo.png){width=\"200px\" fig-alt=\"A blue hexagon with the words 'Repro' and 'RES'\"}\n```\n    \n\n</div>\n\n\n\n### Use Inline R \n\nInclude the current date ([@sec-inline-r]) in a sentence like:\n\nThis CV was created on 2025-09-16.\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n``` markdown\nThis CV was created on 2025-09-16.\n```\n\n\n</div>\n\n\n### Render\n\nRender this document to html ([@sec-render]).\n\n    \n<div class='webex-solution'><button>Solution</button>\n\n    Click on the render button or run the following code in the console. (Do not put it the script!)\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    quarto::quarto_render(\"cv.qmd\")\n    ```\n    :::\n\n    \n    \n</div>\n\n\n### Share\n\nOnce you're done, zip up your entire project folder and share it on Teams under the week 2 exercise post. Try downloading someone else's project and rendering their qmd file.\n\n::: {.callout-important}\nMake sure any files you reference are inside your project folder, and **always** use <a href='https://psyteachr.github.io/glossary/r#relative-path' target='_blank' class='glossary' title='The location of a file in relation to the working directory.'>relative paths</a> and not <a href='https://psyteachr.github.io/glossary/a#absolute-path' target='_blank' class='glossary' title='A file path that starts with / and is not appended to the working directory'>absolute paths</a> when you refer to images or other files in your code. The use of absolute paths is a major source of irreproducibility in published code. The best way to double-check your code for reproducibility problems is to share your entire project directory with a friend and see if they can render your file.\n:::\n\n## Glossary {#sec-glossary-reports -}\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|term                                                |definition                                                                                                                                                                                    |\n|:---------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|[absolute-path](https://psyteachr.github.io/glossary/a#absolute-path){target='_blank' class='glossary'}|A file path that starts with / and is not appended to the working directory                                                                                                                   |\n|[chunk](https://psyteachr.github.io/glossary/c#chunk){target='_blank' class='glossary'}|A section of code in an R Markdown file                                                                                                                                                       |\n|[comment](https://psyteachr.github.io/glossary/c#comment){target='_blank' class='glossary'}|Comments are text that R will not run as code. You can annotate .R files or chunks in R Markdown files with comments by prefacing each line of the comment with one or more hash symbols (#). |\n|[directory](https://psyteachr.github.io/glossary/d#directory){target='_blank' class='glossary'}|A collection or \"folder\" of files on a computer.                                                                                                                                              |\n|[extension](https://psyteachr.github.io/glossary/e#extension){target='_blank' class='glossary'}|The end part of a file name that tells you what type of file it is (e.g., .R or .Rmd).                                                                                                        |\n|[markdown](https://psyteachr.github.io/glossary/m#markdown){target='_blank' class='glossary'}|A way to specify formatting, such as headers, paragraphs, lists, bolding, and links.                                                                                                          |\n|[path](https://psyteachr.github.io/glossary/p#path){target='_blank' class='glossary'}|A string representing the location of a file or directory.                                                                                                                                    |\n|[project](https://psyteachr.github.io/glossary/p#project){target='_blank' class='glossary'}|A way to organise related files in RStudio                                                                                                                                                    |\n|[quarto](https://psyteachr.github.io/glossary/q#quarto){target='_blank' class='glossary'}|An open-source scientific and technical publishing system.                                                                                                                                    |\n|[r-markdown](https://psyteachr.github.io/glossary/r#r-markdown){target='_blank' class='glossary'}|The R-specific version of markdown: a way to specify formatting, such as headers, paragraphs, lists, bolding, and links, as well as code blocks and inline code.                              |\n|[relative-path](https://psyteachr.github.io/glossary/r#relative-path){target='_blank' class='glossary'}|The location of a file in relation to the working directory.                                                                                                                                  |\n|[render](https://psyteachr.github.io/glossary/r#render){target='_blank' class='glossary'}|To create a file (usually an image or PDF) or widget from source code                                                                                                                         |\n|[reproducibility](https://psyteachr.github.io/glossary/r#reproducibility){target='_blank' class='glossary'}|The extent to which the findings of a study can be repeated in some other context                                                                                                             |\n|[script](https://psyteachr.github.io/glossary/s#script){target='_blank' class='glossary'}|A plain-text file that contains commands in a coding language, such as R.                                                                                                                     |\n|[working-directory](https://psyteachr.github.io/glossary/w#working-directory){target='_blank' class='glossary'}|The filepath where R is currently reading and writing files.                                                                                                                                  |\n|[yaml](https://psyteachr.github.io/glossary/y#yaml){target='_blank' class='glossary'}|A structured format for information                                                                                                                                                           |\n\n\n:::\n:::\n\n\n## Further Resources {#sec-resources-reports -}\n\n-   [Quarto Guide](https://quarto.org/docs/guide/)\n-   [Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html)\n-   [Project Structure](https://slides.djnavarro.net/project-structure/) by Danielle Navarro\n-   [How to name files](https://speakerdeck.com/jennybc/how-to-name-files) by Jenny Bryan\n-   [flextable](https://ardata-fr.github.io/flextable-book/) for customised tables\n\n## References {#sec-references-reports -}\n\n\n\n",
    "supporting": [
      "02-reports_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}