{
  "hash": "5a053ff5b05fa31b0e3b87a56cbb03e1",
  "result": {
    "engine": "knitr",
    "markdown": "# Introduction {#sec-intro}\n\n<!-- checked for alt-text -->\n\n::: {.meme .right}\n![](images/memes/rstudio.png){fig-alt=\"A line drawing of a person looking at a computer with a magnifying glass. The text reads 'I just installed RStudio. I'm a data scientist now.'\"}\n:::\n\n\n## Intended Learning Outcomes {#sec-ilo-intro - .ilo}\n\n- [ ] Install R and RStudio \n- [ ] Install add-on packages\n- [ ] Get help for packages and functions\n- [ ] Create objects by writing and running code in the console\n\n## Functions used {#sec-functions-intro -}\n\n\n\n* built-in (you can always use these without loading any packages)\n    * base:: `.rs.restartR()`, `as.Date()`, `library()`, `paste()`, `sample()`, `Sys.Date()`\n    * utils:: `help()`, `install.packages()`, `vignette()`\n    * stats:: `sample()`, `rnorm()`\n* other (you need to load each package to use these)\n    * beepr:: `beepr::beep()`\n    * devtools:: `devtools::install_github()`\n\n## Setup {#sec-setup-intro -}\n\nDownload the [RStudio IDE Cheatsheet](https://rstudio.github.io/cheatsheets/html/rstudio-ide.html)\n\n## Installing R and RStudio {#sec-intro-installing-r}\n\nR is a programming language that you will write code in and RStudio is a program that makes working in R easier. \n\n::: {.try}\n@sec-installing-r has technical details on installing R and RStudio on your computer. Once you have installed R and RStudio, come back to this chapter. If you already had R and/or RStudio installed, we recommend updating to the latest version before you work through this course. @sec-updating-r has more details on how to do that. Here, we'll concentrate on introducing you to RStudio's interface and getting it configured.\n:::\n\n### RStudio {#sec-rstudio_ide}\n\nWhen you installed R, that gave your computer the ability to process the R programming language, and also installed an app called \"R\". We will never use that app. Instead, we will use [RStudio](http://www.rstudio.com).  \n\n::: {.callout-warning}\n## Launch R though the RStudio IDE\n\nLaunch <img src=\"images/intro/rstudio_icon.png\" style=\"height: 2em; vertical-align: middle;\" alt=\"RStudio.app\" /> (RStudio.app), not <img src=\"images/intro/new_R_logo.png\" style=\"height: 2em; vertical-align: middle;\" alt=\"R.app\" /> (R.app).\n:::\n\nRStudio is an Integrated Development Environment (<a href='https://psyteachr.github.io/glossary/i#ide' target='_blank' class='glossary' title='Integrated Development Environment: a program that serves as a text editor, file manager, and provides functions to help you read and write code. RStudio is an IDE for R.'>IDE</a>). Think of it as using a plain text editor like NotePad to write a book versus using a word processor like Microsoft Word. You could do it, but it would be much harder without things like spell-checking and formatting and you wouldn't be able to use some of the advanced features that Word has developed. In a similar way, you can use R without an IDE, but we wouldn't recommend it. (You can use your favourite IDE, but the examples in this book will all be shown in RStudio.) RStudio serves as a text editor, file manager, spreadsheet viewer, and more. The key thing to remember is that although you will do all of your work using RStudio for this course, you are actually using two pieces of software, which means that from time to time, both of them may have separate updates.\n\nRStudio is arranged with four window <a href='https://psyteachr.github.io/glossary/p#panes' target='_blank' class='glossary' title='RStudio is arranged with four window “panes”.'>panes</a>.\n\n![The RStudio IDE](images/intro/rstudio.png){#fig-rstudio fig-alt=\"An interface with 4 panes: code in the upper left and lower right, object info in the upper right, and a plot in the lower right\"}\n\nBy default, the upper left pane is the **source pane**, where you view, write, and edit code from files and view data tables in a spreadsheet format. When you first open RStudio, this pane won't display until we open a document or load in some data -- don't worry, we'll get to that soon.\n\nThe lower left pane is the **console pane**, where you can type in commands and view output messages. You can write code in the console to test it out. The code will run and can create objects in the environment, but the code itself won't be saved. You need to write your code into a script in the source pane to save it, which we'll cover in @sec-reports.\n\nThe right panes have several different tabs that show you information about your code. The most used tab in the upper right pane is the **Environment** tab, which lists some information about the <a href='https://psyteachr.github.io/glossary/o#object' target='_blank' class='glossary' title='A word that identifies and stores the value of some data for later use.'>objects</a> that you have defined in your code.  \n\nIn the lower right pane, the most used tabs are the **Files** tab for directory structure, the **Plots** tab for plots made in a script, the **Packages** tab for managing add-on packages (see @sec-packages), the **Viewer** tab to display reports created by your scripts, and the **Help** tab to see function help. We'll learn more about the Help tab in @sec-function-help. \n\nYou can change the location of panes and what tabs are shown in each pane under <if>Tools > Global Options... > Pane Layout</if>.\n\n### Reproducibility {#sec-intro-reproducibility}\n\nIn this class, you will be learning how to do <a href='https://psyteachr.github.io/glossary/r#reproducible-research' target='_blank' class='glossary' title='Research that documents all of the steps between raw data and results in a way that can be verified.'>reproducible research</a>.  This involves writing scripts that completely and transparently perform some analysis from start to finish in a way that yields the same result for different people using the same software on different computers. Transparency is a key value of science, as embodied in the \"trust but verify\" motto. \n\n\n::: {.meme .right}\n![](images/memes/forgetting.jpg){fig-alt = \"Fry from Futurama squinting; top text: Not sure if I have a bad memory; bottom text: Or a bad memory\"}\n:::\n\nWhen you do things reproducibly, others can understand and check your work. This benefits science, but there is a selfish reason, too: the most important person who will benefit from a reproducible script is your future self. When you return to an analysis after two weeks of vacation, you will thank your earlier self for doing things in a transparent, reproducible way, as you can easily pick up right where you left off. It might take a little longer to set up the report in the first instance with reproducible methods, but the time it saves you in the long run is invaluable.\n\n::: {.callout-important}\n## Settings for Reproducibility\n\n@sec-rstudio-settings shows you how to change two important settings in the Global Options to increase reproducibility. Your settings should have:\n\n* Restore .RData into workspace at startup: <select class='webex-select'><option value='blank'></option><option value=''>Checked</option><option value='answer'>Not Checked</option></select>\n* Save workspace to .RData on exit: <select class='webex-select'><option value='blank'></option><option value=''>Always</option><option value='answer'>Never</option><option value=''>Ask</option></select>\n\nYou will need to change these settings each time you update RStudio.\n:::\n\n### Themes and accessiblilty\n\nYou can customise how RStudio looks to make it work for you. You can change the default font, font size, and general appearance of RStudio, including using dark mode. \n\n::: {.try}\nClick <if>Tools > Global Options > Appearance</if>. Play around with the settings and see what you prefer -- you're going to spend a lot of time with R, it might as well look nice!\n:::\n\n\n### Sessions {#sec-intro-sessions}\n\nIf you have the above settings configured correctly, when you open up RStudio and start writing code, loading packages, and creating objects, you will be doing so in a new session and your Environment tab should be completely empty. If you find that your code isn't working and you can't figure out why, it might be worth restarting your R session. This will clear the environment and detach all loaded packages - think of it like restarting your phone. There are several ways that you can restart R:\n\n* Menu: <if>Session > Restart R</if>\n* <mac>Cmd-Shift-F10</mac> or <pc>Ctl-Shift-F10</pc>\n* type `.rs.restartR()` in the console\n\n::: {.try}\nTry each method of restarting R. Additionally, now would be a good time to create a notebook where you can keep a record of useful hints and tips and things to try when your code isn't working. Add \"restart R session\" to this notebook as your first item. \n:::\n\n## Packages and functions {#sec-packages}\n\nWhen you install R you will have access to a range of <a href='https://psyteachr.github.io/glossary/f#function' target='_blank' class='glossary' title='A named section of code that can be reused.'>functions</a> including options for <a href='https://psyteachr.github.io/glossary/d#data-wrangling' target='_blank' class='glossary' title='The process of preparing data for visualisation and statistical analysis.'>data wrangling</a> and statistical analysis. The functions that are included in the default installation are typically referred to as <a href='https://psyteachr.github.io/glossary/b#base-r' target='_blank' class='glossary' title='The set of R functions that come with a basic installation of R, before you add external packages.'>base R</a> and you can think of them like the default apps that come pre-loaded on your phone. \n\nOne of the great things about R, however, is that it is **user extensible**: anyone can create a new add-on that extends its functionality. There are currently thousands of <a href='https://psyteachr.github.io/glossary/p#package' target='_blank' class='glossary' title='A group of R functions.'>packages</a> that R users have created to solve many different kinds of problems, or just simply to have fun. For example, there are packages for data visualisation, machine learning, interactive dashboards, web scraping, and playing games such as Sudoku.\n\nAdd-on packages are not distributed with base R, but have to be downloaded and installed from an archive, in the same way that you would, for instance, download and install PokemonGo on your phone. The main repository where packages reside is called <a href='https://psyteachr.github.io/glossary/c#cran' target='_blank' class='glossary' title='The Comprehensive R Archive Network: a network of ftp and web servers around the world that store identical, up-to-date, versions of code and documentation for R.'>CRAN</a>, the Comprehensive R Archive Network.\n\nThere is an important distinction between **installing** a package and **loading** a package.\n\n### Installing a package {#sec-install-package}\n\n::: {.meme .right}\n![](images/memes/pokemon.gif){fig-alt=\"Pikachu and Eevee from Pokemon waving and high-five-ing\"}\n:::\n\nThis is done using `install.packages()`. This is like installing an app on your phone: you only have to do it once and the app will remain installed until you remove it. For instance, if you want to use PokemonGo on your phone, you install it once from the App Store or Play Store; you don't have to re-install it each time you want to use it. Once you launch the app, it will run in the background until you close it or restart your phone. Likewise, when you install a package, the package will be available (but not *loaded*) every time you open up R.\n\n::: {.try}\nInstall the <pkg>tidyverse</pkg> package on your system. This is the main package we will use throughout this book for data wrangling, summaries, and visualisation. It is actually a bundle of packages, which we'll explain further in @sec-tidyverse.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Run in the console\"}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\nIf you get a message that says something like `package ‘tidyverse’ successfully unpacked and MD5 sums checked`, the installation was successful. If you get an error and the package wasn't installed, check the troubleshooting section of @sec-package-install-troubleshooting.\n:::\n\n::: {.callout-caution}\n## Install packages from the console only\n\nNever install a package from inside a script. Only do this from the console pane or the packages tab of the lower right pane.\n:::\n\nHere are some other packages you'll want to install for the first chapter.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Run in the console\"}\ninstall.packages(\"beepr\")     # for beeps\ninstall.packages(\"devtools\")  # for installing packages from github\n```\n:::\n\n\nOnce you've installed the <pkg>devtools</pkg> package, you can also install packages from repositories other than CRAN, such as github. The following code installs the development version of a package for guiding computational reproducibility reviews.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Run in the console\"}\n# install compreprev package \ndevtools::install_github(\"debruine/compreprev\")\n```\n:::\n\n\n### Loading a package\n\nThis is done using the `library()` function. This is like **launching** an app on your phone: the functionality is only there where the app is launched and remains there until you close the app or restart. For example, when you run `library(devtools)` within a session, the functions in the package referred to by `devtools` will be made available for your R session. The next time you start R, you will need to run `library(devtools)` again if you want to access that package.\n\n\n::: {.try}\nAfter installing the <pkg>beepr</pkg> package, you can load it for your current R session as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Run in the console\"}\nlibrary(beepr)\n```\n:::\n\n:::\n\nYou might get some red text when you load a package, this is normal. It is usually warning you that this package has functions that have the same name as other packages you've already loaded.\n\n::: {.callout-note}\nYou can use the convention `package::function()` to indicate in which add-on package a function resides. For instance, if you see `readr::read_csv()`, that refers to the function `read_csv()` in the <pkg>readr</pkg> add-on package. If the package is loaded using `library()`, you don't have to specify the package name before a function unless there is a <a href='https://psyteachr.github.io/glossary/c#conflict' target='_blank' class='glossary' title='Having two packages loaded that have a function with the same name.'>conflict</a> (e.g., you have two packages loaded that have a function with the same name).\n:::\n\n### Using a function\n\nNow you can run the function `beep()`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Run in the console\"}\nbeep()\n```\n:::\n\n\nA <a href='https://psyteachr.github.io/glossary/f#function' target='_blank' class='glossary' title='A named section of code that can be reused.'>function</a> is a name that refers to some code you can reuse. We'll start by using functions that are provided for you in packages, but you can also write your own functions (@sec-custom-functions). After the function name, there is a pair of parentheses, which contain zero or more <a href='https://psyteachr.github.io/glossary/a#argument' target='_blank' class='glossary' title='A variable that provides input to a function.'>arguments</a>. These are options that you can set. In the example above, the `sound` argument has a <a href='https://psyteachr.github.io/glossary/d#default-value' target='_blank' class='glossary' title='A value that a function uses for an argument if it is skipped.'>default value</a> of `1`, which makes a \"ping\" sound. \n\n\n::: {.try}\nTry changing the argument to an integer between 1 and 11.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Run in the console\"}\nbeep(sound = 8)\n```\n:::\n\n:::\n\nIf you type a function into the console pane, it will run as soon as you hit enter. If you put the function in a <a href='https://psyteachr.github.io/glossary/s#script' target='_blank' class='glossary' title='A plain-text file that contains commands in a coding language, such as R.'>script</a> or <a href='https://psyteachr.github.io/glossary/q#quarto' target='_blank' class='glossary' title='An open-source scientific and technical publishing system.'>quarto</a> document in the <a href='https://psyteachr.github.io/glossary/p#panes' target='_blank' class='glossary' title='RStudio is arranged with four window “panes”.'>source pane</a>, it won't run until you run the script, <a href='https://psyteachr.github.io/glossary/r#render' target='_blank' class='glossary' title='To create a file (usually an image or PDF) or widget from source code'>render</a> the file, or run a code <a href='https://psyteachr.github.io/glossary/c#chunk' target='_blank' class='glossary' title='A section of code in an R Markdown file'>chunk</a>. You'll learn more about this in @sec-reports.\n\n### Tidyverse {#sec-tidyverse}\n\n<pkg>tidyverse</pkg> is a meta-package that loads several packages we'll be using in almost every chapter in this book:\n\n- <pkg>ggplot2</pkg>, for data visualisation (@sec-viz)\n- <pkg>readr</pkg>, for data import (@sec-data)\n- <pkg>tibble</pkg>, for tables (@sec-tables-data)\n- <pkg>tidyr</pkg>, for data tidying (@sec-tidy)\n- <pkg>dplyr</pkg>, for data manipulation (@sec-wrangle)\n- <pkg>stringr</pkg>, for <a href='https://psyteachr.github.io/glossary/s#string' target='_blank' class='glossary' title='A piece of text inside of quotes.'>strings</a> (@sec-data-types)\n- <pkg>forcats</pkg>, for <a href='https://psyteachr.github.io/glossary/f#factor' target='_blank' class='glossary' title='A data type where a specific set of values are stored with labels; An explanatory variable manipulated by the experimenter'>factors</a> (@sec-categorical)\n- <pkg>lubridate</pkg>, for working with dates (@sec-dates-times)\n- <pkg>purrr</pkg>, for repeating things (@sec-iteration-functions)\n\nWhen you install <pkg>tidyverse</pkg>, it also installs some other useful packages that you can load individually. You can get the full list using `tidyverse_packages()`, but the packages we'll be using in this book are:\n\n- <pkg>googlesheets4</pkg>, for working with Google spreadsheets\n- <pkg>readxl</pkg>, for Excel files\n- <pkg>hms</pkg>, for working with times\n- <pkg>rvest</pkg>, for web scraping\n- <pkg>broom</pkg>, for tidy model outputs\n\n### Function Help {#sec-function-help}\n\nWhen you load the <pkg>tidyverse</pkg> it automatically loads all of the above packages, however, it can be helpful to know which package a function comes from if you need to Google it. If a <a href='https://psyteachr.github.io/glossary/f#function' target='_blank' class='glossary' title='A named section of code that can be reused.'>function</a> is in <a href='https://psyteachr.github.io/glossary/b#base-r' target='_blank' class='glossary' title='The set of R functions that come with a basic installation of R, before you add external packages.'>base R</a> or a loaded package, you can type `?function_name` in the console to access the help file. At the top of the help it will give you the function and package name. \n\nIf the package isn't loaded, use `?package_name::function_name` or specify the package in the `help()` function. When you aren't sure what package the function is in, use the shortcut `??function_name`.\n\n::: {.try}\n\nUse the methods above to get help for the `beepr::beep()` function.\n\n\n::: {.cell webex.hide='true'}\n\n<div class='webex-solution'><button>Solution</button>\n\n```{.r .cell-code  code-summary=\"Run in the console\"}\n# if the package is loaded\n?beepr\nhelp(\"beepr\")\n\n# works whether or not the package is loaded\n?beepr::beep\nhelp(\"beep\", package=\"beepr\") \n\n# shows a list of potentially matching functions\n??beep\n```\n\n\n</div>\n:::\n\n:::\n\n\nFunction help is always organised in the same way. For example, look at the help for `?beepr::beep`. At the top, it tells you the name of the function and its package in curly brackets, then a short description of the function, followed by a longer description. The **Usage** section shows the function with all of its <a href='https://psyteachr.github.io/glossary/a#argument' target='_blank' class='glossary' title='A variable that provides input to a function.'>arguments</a>. If any of those arguments have default values, they will be shown like `function(arg = default)`. The **Arguments** section lists each argument with an explanation. There may be a **Details** section after this with even more detail about the functions. The **Examples** section is last, and shows examples that you can run in your console window to see how the function works.\n\n\n::: {.try}\nUse function help to answer the following questions.\n\n* What is the first argument to the `mean` function? <select class='webex-select'><option value='blank'></option><option value=''>trim</option><option value=''>na.rm</option><option value=''>mean</option><option value='answer'>x</option></select>\n* What package is `read_excel` in? <select class='webex-select'><option value='blank'></option><option value=''>readr</option><option value='answer'>readxl</option><option value=''>base</option><option value=''>stats</option></select>\n:::\n\n\n## Code Basics {#sec-code-basics}\n\n### Arguments\n\nYou can look up the arguments/options that a function has by using the help documentation. Some arguments are required, and some are optional. Optional arguments will often use a default (normally specified in the help documentation) if you do not enter any value.\n\n::: {.try}\nAs an example, look at the help documentation for the function `sample()` which randomly samples items from a list. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Run in the console\"}\n?sample\n```\n:::\n\n:::\n\nThe help documentation for `sample()` should appear in the bottom right help panel. In the usage section, we see that `sample()` takes the following form:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(x, size, replace = FALSE, prob = NULL)\n```\n:::\n\n\nIn the arguments section, there are explanations for each of the arguments:\n\n* `x` is the list of items we want to choose from, \n* `size` is the number of items we want to choose, \n* `replace` is whether or not each item may be selected more than once, \n* `prob` gives the probability that each item is chosen. \n\nIn the details section it notes that if no values are entered for `replace` or `prob` it will use defaults of `FALSE` (each item can only be chosen once) and `NULL` (all items will have equal probability of being chosen). Because there is no default value for `x` or `size`, they must be specified otherwise the code won't run.\n\n::: {.try}\nLet's try an example and just change the required arguments `x` and `size` to ask R to choose from the set of `letters` (a built-in <a href='https://psyteachr.github.io/glossary/v#vector' target='_blank' class='glossary' title='A type of data structure that collects values with the same data type, like T/F values, numbers, or strings.'>vector</a> of the 26 lower-case Latin letters), 5 random values. \n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(x = letters, size = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"t\" \"k\" \"j\" \"y\" \"m\"\n```\n\n\n:::\n:::\n\n:::\n\n:::{.callout-note  collapse=\"true\"}\n## Why are my letters different to your letters?\n\n`sample()` generates a random sample. Each time you run the code, you'll generate a different set of random letters (try it). The function `set.seed()` controls the random number generator - if you're using any functions that use randomness (such as `sample()`), running `set.seed()` will ensure that you get the same result (in many cases this may not be what you want to do). To get the same numbers we do, run `set.seed(8675309)` in the console, and then run `sample(x = letters, size = 5)` again.\n:::\n\nNow we can change the default value for the `replace` argument to produce a set of letters that is allowed to have duplicates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(8675309)\nsample(x = letters, size = 5, replace = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"t\" \"k\" \"j\" \"k\" \"m\"\n```\n\n\n:::\n:::\n\n\nThis time R has still produced 5 random letters, but now this set of letters has two instances of \"k\". Always remember to use the help documentation to help you understand what arguments a function requires.\n\n### Argument names\n\nIn the above examples, we have written out the argument names in our code (i.e., `x`, `size`, `replace`), however, this is not strictly necessary. The following two lines of code would both produce the same result (although each time you run `sample()` it will produce a slightly different result, because it's random, but they would still work the same):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(x = letters, size = 5, replace = TRUE)\nsample(letters, 5, TRUE)\n```\n:::\n\n\nImportantly, if you do not write out the argument names, R will use the default order of arguments. That is, for `sample` it will assume that the first value you enter is `x`, the second value is `size` and the third value is `replace`. \n\nIf you write out the argument names, then you can write the arguments in whatever order you like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(size = 5, replace = TRUE, x = letters)\n```\n:::\n\n\nWhen you are first learning R, you may find it useful to write out the argument names as it can help you remember and understand what each part of the function is doing. However, as your skills progress you may find it quicker to omit the argument names and you will also see code examples online that do not use argument names, so it is important to be able to understand which argument each bit of code is referring to (or look up the help documentation to check).\n\nIn this course, we will always write out the argument names the first time we use each function. However, in subsequent uses they may be omitted.\n\n### Tab auto-complete {#sec-tab-autocomplete}\n\nOne very useful feature of RStudio is tab auto-complete for functions. If you write the name of the function and then press the tab key, RStudio will show you the arguments that function takes along with a brief description. If you press enter on the argument name it will fill in the name for you, just like auto-complete on your phone. This is incredibly useful when you are first learning R and you should remember to use this feature frequently. \n\n![Tab auto-complete](images/intro/autocomplete.png){#fig-autocomplete fig-alt = \"The code reads `sample()` and there is a drop-down menu with the options `x =`, `size =`, replace =` and prob =`. The third option is highlighted blue and there is a yellow text box reading 'replace: should sampling be with replacements? Press F1 for additional help'\"}\n\n::: {.try}\nUse tab autocomplete to figure out the arguments to `rnorm()`. Create a vector of 20 numbers from a normal distribution with a mean of 100 and a standard deviation of 10.\n\n\n::: {.cell webex.hide='true'}\n\n<div class='webex-solution'><button>Solution</button>\n\n```{.r .cell-code}\nrnorm(n = 20, mean = 100, sd = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 120.29392 110.65416 109.87220 100.27454 106.72872 105.72067 109.03678\n [8]  84.50448 110.22638 101.50083  93.40036  90.05411 119.72459  95.58198\n[15]  90.99363  98.49412  91.72106 119.85826 100.44005  95.95718\n```\n\n\n:::\n\n\n</div>\n:::\n\n:::\n\n\n### Objects {#sec-objects}\n\nA large part of your coding will involve creating and manipulating objects. Objects contain stuff. That stuff can be numbers, words, or the result of operations and analyses. You assign content to an object using `<-` or `=` (we will use `<-` in this book).\n\n::: {.try}\nRun the following code in the console, but change the values of `name` and `age` to your own details and change `halloween` to a holiday or date you care about.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Run in the console\"}\nname <- \"Lisa\"\nage <- 48\ntoday <- Sys.Date()\nhalloween <- as.Date(\"2025-10-31\")\n```\n:::\n\n:::\n\nYou'll see that four objects now appear in the environment pane:\n\n* `name` is <a href='https://psyteachr.github.io/glossary/c#character' target='_blank' class='glossary' title='A data type representing strings of text.'>character</a> (text) data. In order for R to recognise it as text, it **must** be enclosed in double quotation marks `\" \"`.\n* `age` is <a href='https://psyteachr.github.io/glossary/n#numeric' target='_blank' class='glossary' title='A data type representing a real decimal number or integer.'>numeric</a> data. In order for R to recognise this as a number, it **must not** be enclosed in quotation marks.\n* `today` stores the result of the function `Sys.Date()`. This function returns your computer system's date. Unlike `name` and `age`, which are hard-coded (i.e., they will always return the values you enter), the contents of the object `today` will change dynamically with the date. That is, if you run that function tomorrow, it will update the date to tomorrow's date.\n* `halloween` is also a date but it's hard-coded as a specific date. It's wrapped within the `as.Date()` function that tells R to interpret the character string you provide as a date rather than text.\n\n::: {.try}\nTo print the contents of an object, type the object's name in the console and press enter. Try printing all four objects now.\n:::\n\nFinally, a key concept to understand is that objects can interact and you can save the results of those interactions in new object. \n\n::: {.try}\nEdit and run the following code to create these new objects, and then print the contents of each new object. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Run in the console\"}\ndecade <- age + 10\nfull_name <- paste(name, \"DeBruine\")\nhow_long <- halloween - today\n```\n:::\n\n:::\n\n\n## Getting help {#sec-help}\n\nYou will feel like you need a *lot* of help when you're starting to learn. This won't really go away; it's impossible to memorise everything. The goal is to learn enough about the structure of R that you can look things up quickly. This is why we'll introduce specialised jargon in the glossary for each chapter; it's easier to google \"convert <a href='https://psyteachr.github.io/glossary/c#character' target='_blank' class='glossary' title='A data type representing strings of text.'>character</a> to <a href='https://psyteachr.github.io/glossary/n#numeric' target='_blank' class='glossary' title='A data type representing a real decimal number or integer.'>numeric</a> in R\" than \"make numbers in quotes be actual numbers not words\". In addition to the function help described above, here are some additional resources you should use often.\n\n### Package reference manuals\n\nStart up help in a browser by entering `help.start()` in the console. Click on <if>Packages</if> under <if>Reference</if> to see a list of packages. Scroll down to the <pkg>readxl</pkg> package and click on it to see a list of the functions that are available in that package. \n\n\n### Googling\n\nIf the function help doesn't help, or you're not even sure what function you need, try Googling your question. It will take some practice to be able to use the right jargon in your search terms to get what you want. It helps to put \"R\" or \"tidyverse\" in the search text, or the name of the relevant package, like \"ggplot2\". \n\n### AI\n\nGenerative AI platforms have exploded in popularity, particularly when it comes to coding. Because of this, we have created a companion book [AITutoR](https://psyteachr.github.io/AITutoR/) to show you how to use AI responsibly to support your coding journey. \n\n::: {.meme .right}\n![](images/memes/translate-server-error.jpg){fig-alt=\"A sign with English and Chinese. The top line of text reads 'Translate Server Error', the bottom line reads '急救英文'\"}\n:::\n\nWhile generative AI can be a very helpful tool to support coding, we ask you not to rely on it too heavily while you are building the essential skills for coding. The exercises are meant to build your mental models for understanding data. If you don't have a good understanding of how data is structured, you cannot evaluate if AI suggestions are correct, contain subtle errors, or are wildly off base.\n\nComing back to the exercise analogy, while a forklift can lift heavy weights easier and faster than you can, it doesn't help your sporting performance if you get a forklift to lift weights at the gym for you. The same is true for AI and coding. The exercises we ask you to do are relatively simple for AI to solve, but it's important for you to be able to fluently solve them so that you have the necessary \"fitness\" to do more complex tasks.\n\n### Vignettes\n\nMany packages, especially [tidyverse](https://www.tidyverse.org/packages/) ones, have helpful websites with vignettes explaining how to use their functions. Some of the vignettes are also available inside R. You can access them from a package's help page or with the `vignette()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Run in the console\"}\n# opens a list of available vignettes\nvignette(package = \"ggplot2\")\n\n# opens a specific vignette in the Help pane\nvignette(\"ggplot2-specs\", package = \"ggplot2\")\n```\n:::\n\n\n\n## Exercises {#sec-exercises-intro}\n\n### Restart R \n\nRestart R, not RStudio. This should clear the environment tab, but not close your application window.\n\n\n::: {.cell webex.hide='true'}\n\n<div class='webex-solution'><button>Solution</button>\n* Menu: <if>Session > Restart R</if>\n* <mac>Cmd-Shift-F10</mac> or <pc>Ctl-Shift-F10</pc>\n* type `.rs.restartR()` in the console\n</div>\n:::\n\n\n### Install a Package\n\nInstall the <pkg>faux</pkg> package from CRAN.\n\n\n::: {.cell webex.hide='true'}\n\n<div class='webex-solution'><button>Solution</button>\n\n```{.r .cell-code}\ninstall.packages(\"faux\")   # for simulating data\n```\n\n\n</div>\n:::\n\n\n### Load a Package\n\nLoad the <pkg>faux</pkg> package.\n\n\n::: {.cell webex.hide='true'}\n\n<div class='webex-solution'><button>Solution</button>\n\n```{.r .cell-code}\nlibrary(faux)\n```\n\n\n</div>\n:::\n\n\n### Use a Function\n\nRun the `make_id()` function.  Use tab autocomplete to figure out what the arguments are, and make it generate the following:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"P01_control\" \"P02_control\" \"P03_control\" \"P04_control\" \"P05_control\"\n```\n\n\n:::\n:::\n\n\n\n::: {.cell webex.hide='true'}\n\n<div class='webex-solution'><button>Solution</button>\n\n```{.r .cell-code}\nmake_id(n = 5, prefix = \"P\", digits = 2, suffix = \"_control\")\n\n# this also works, if you keep the arguments in this order\nmake_id(5, \"P\", 2, \"_control\")\n```\n\n\n</div>\n:::\n\n\n### Get Help\n\nView the help files for `faux::rnorm_multi`.\n\n\n::: {.cell webex.hide='true'}\n\n<div class='webex-solution'><button>Solution</button>\n\n```{.r .cell-code}\n?rnorm_multi\n```\n\n\n</div>\n:::\n\n\n### Create an Object\n\nUse `faux::rnorm_multi()` to create an object called `sim_data`. Set the arguments so this is a table with 10 rows and 3 columns. Click on the object name in the Environment tab to view the table, or print it to the console. \n\n\n::: {.cell webex.hide='true'}\n\n<div class='webex-solution'><button>Solution</button>\n\n```{.r .cell-code}\nsim_data <- rnorm_multi(n = 10, vars = 3)\n\nsim_data # prints to the console\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|         X1|         X2|         X3|\n|----------:|----------:|----------:|\n|  1.5814121| -2.0446042| -0.9067866|\n| -0.2760052| -0.2315572|  0.6659664|\n|  1.1288144|  1.1568557|  1.6956159|\n| -1.7193539| -0.3316717| -0.7358019|\n|  1.3100702| -0.3843754| -0.7209335|\n|  1.6286277|  1.0481596|  0.3665779|\n| -0.7811850| -1.3933121| -1.7554237|\n| -0.1593198|  0.3776388| -0.6220157|\n|  0.7840042| -0.4999909| -1.1765128|\n| -0.5693951| -0.4640961| -0.3289682|\n\n</div>\n:::\n\n\n</div>\n:::\n\n\n## Glossary {#sec-glossary-intro -}\n\nThe glossary at the end of each chapter defines common jargon you might encounter while learning R. This specialised vocabulary can help you to communicate more efficiently and to search for solutions to problems. The terms below link to our [PsyTeachR glossary](https://psyteachr.github.io/glossary/), which contains further information and examples.\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|term                                                    |definition                                                                                                                                                                 |\n|:-------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|[argument](https://psyteachr.github.io/glossary/a#argument){target='_blank' class='glossary'}|A variable that provides input to a function.                                                                                                                              |\n|[base-r](https://psyteachr.github.io/glossary/b#base-r){target='_blank' class='glossary'}|The set of R functions that come with a basic installation of R, before you add external packages.                                                                         |\n|[character](https://psyteachr.github.io/glossary/c#character){target='_blank' class='glossary'}|A data type representing strings of text.                                                                                                                                  |\n|[chunk](https://psyteachr.github.io/glossary/c#chunk){target='_blank' class='glossary'}|A section of code in an R Markdown file                                                                                                                                    |\n|[conflict](https://psyteachr.github.io/glossary/c#conflict){target='_blank' class='glossary'}|Having two packages loaded that have a function with the same name.                                                                                                        |\n|[cran](https://psyteachr.github.io/glossary/c#cran){target='_blank' class='glossary'}|The Comprehensive R Archive Network: a network of ftp and web servers around the world that store identical, up-to-date, versions of code and documentation for R.         |\n|[data-wrangling](https://psyteachr.github.io/glossary/d#data-wrangling){target='_blank' class='glossary'}|The process of preparing data for visualisation and statistical analysis.                                                                                                  |\n|[default-value](https://psyteachr.github.io/glossary/d#default-value){target='_blank' class='glossary'}|A value that a function uses for an argument if it is skipped.                                                                                                             |\n|[factor](https://psyteachr.github.io/glossary/f#factor){target='_blank' class='glossary'}|A data type where a specific set of values are stored with labels; An explanatory variable manipulated by the experimenter                                                 |\n|[function](https://psyteachr.github.io/glossary/f#function){target='_blank' class='glossary'}|A named section of code that can be reused.                                                                                                                                |\n|[ide](https://psyteachr.github.io/glossary/i#ide){target='_blank' class='glossary'}|Integrated Development Environment: a program that serves as a text editor, file manager, and provides functions to help you read and write code. RStudio is an IDE for R. |\n|[numeric](https://psyteachr.github.io/glossary/n#numeric){target='_blank' class='glossary'}|A data type representing a real decimal number or integer.                                                                                                                 |\n|[object](https://psyteachr.github.io/glossary/o#object){target='_blank' class='glossary'}|A word that identifies and stores the value of some data for later use.                                                                                                    |\n|[package](https://psyteachr.github.io/glossary/p#package){target='_blank' class='glossary'}|A group of R functions.                                                                                                                                                    |\n|[panes](https://psyteachr.github.io/glossary/p#panes){target='_blank' class='glossary'}|RStudio is arranged with four window \"panes\".                                                                                                                              |\n|[quarto](https://psyteachr.github.io/glossary/q#quarto){target='_blank' class='glossary'}|An open-source scientific and technical publishing system.                                                                                                                 |\n|[render](https://psyteachr.github.io/glossary/r#render){target='_blank' class='glossary'}|To create a file (usually an image or PDF) or widget from source code                                                                                                      |\n|[reproducible-research](https://psyteachr.github.io/glossary/r#reproducible-research){target='_blank' class='glossary'}|Research that documents all of the steps between raw data and results in a way that can be verified.                                                                       |\n|[script](https://psyteachr.github.io/glossary/s#script){target='_blank' class='glossary'}|A plain-text file that contains commands in a coding language, such as R.                                                                                                  |\n|[string](https://psyteachr.github.io/glossary/s#string){target='_blank' class='glossary'}|A piece of text inside of quotes.                                                                                                                                          |\n|[vector](https://psyteachr.github.io/glossary/v#vector){target='_blank' class='glossary'}|A type of data structure that collects values with the same data type, like T/F values, numbers, or strings.                                                               |\n\n\n:::\n:::\n\n\n\n## Further Resources {#sec-resources-intro -}\n\n* [RStudio IDE Cheatsheet](https://rstudio.github.io/cheatsheets/html/rstudio-ide.html)\n* [RStudio Cloud](https://rstudio.cloud/)\n\n",
    "supporting": [
      "01-intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}