{
  "hash": "8c01a194aab35ce620c9e0ddabe3edba",
  "result": {
    "engine": "knitr",
    "markdown": "# Data Visualisation {#sec-viz .incomplete-chapter}\n\n:::{.meme .right}\n![](images/memes/better_graphs.png){fig-alt=\"xkcd comic titled 'General quality of charts and graphs in scientific papers'; y-axis: BAD on the bottom to GOOD on the top; x-axis: 1950s to 2010s; Line graph increases with time except for a dip between 1990 and 2010 labelled POWERPOINT/MSPAINT ERA\"}\n:::\n\n## Intended Learning Outcomes {#sec-ilo-viz -}\n\n- [ ] Identify categorical versus continuous data\n- [ ] Create plots in layers using ggplot\n- [ ] Choose appropriate plots for data\n\n## Functions used {#sec-functions-viz -}\n\n* built-in (you can always use these without loading any packages)\n    * base:: , `as.numeric()`, `c()`, `factor()`, `mean()`, `seq()`, \n    * grDevices:: `rgb()`\n* tidyverse (you can use all these with `library(tidyverse)`)\n    * readr:: `readr::col_character()`, `readr::col_datetime()`, `readr::col_double()`, `readr::col_factor()`, `readr::col_integer()`, `readr::cols()`, `readr::read_csv()`\n    * lubridate:: `lubridate::now()`, `lubridate::today()`\n    * dplyr:: `dplyr::count()`, `dplyr::glimpse()`, \n    * ggplot2:: `aes()`, `coord_cartesian()`, `element_blank()`, `facet_wrap()`, `geom_bar()`, `geom_boxplot()`, `geom_col()`, `geom_histogram()`, `geom_jitter()`, `geom_point()`, `geom_smooth()`, `ggplot()`, `ggsave()`, `ggtitle()`, `guides()`, `scale_fill_manual()`, `scale_x_continuous()`, `scale_x_date()`, `scale_x_discrete()`, `scale_y_continuous()`, `spec()`, `stat_summary()`, `theme()`, `theme_bw()`, `theme_minimal()`, `theme_set()`\n* other (you need to load each package to use these)\n    * ggthemes:: `ggthemes::theme_gdocs()`\n    * patchwork:: `patchwork::plot_layout()` \n\n\n## Set-up {#sec-setup-viz -}\n\n1. Open your `reprores` project \n1. Create a new quarto file called `03-dataviz.qmd`\n1. Update the YAML header \n1. Replace the setup chunk with the one below: \n\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#‎| label: setup\n#‎| include: false\nlibrary(tidyverse) # includes ggplot2\nlibrary(patchwork) # for multi-part plots\nlibrary(ggthemes)  # for plot themes\n```\n````\n\n::: {.cell-output .cell-output-error}\n\n```\nError in library(ggthemes): there is no package called 'ggthemes'\n```\n\n\n:::\n\n````{.cell-code}\n```{{r}}\nlibrary(lubridate) # for manipulating dates\n```\n````\n:::\n\n\n\n\nIf you get the message `Error in library(x) : there is no package called ‘x’`, please refer to @sec-install-package.\n\nWe'd recommend making a new code chunk for each different activity, and using the white space to make notes on any errors you make, things you find interesting, or questions you'd like to ask the course team.\n\nDownload the [ggplot2 cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf).\n\n## Variable types\n\nIf a spreadsheet is in a <a href='https://psyteachr.github.io/glossary/t#tidy-data' target='_blank' class='glossary' title='A format for data that maps the meaning onto the structure.'>tidy data</a> format, each row is an <a href='https://psyteachr.github.io/glossary/o#observation' target='_blank' class='glossary' title='All of the data about a single trial or question.'>observation</a>, each column is a <a href='https://psyteachr.github.io/glossary/v#variable' target='_blank' class='glossary' title='(coding): A word that identifies and stores the value of some data for later use; (stats): An attribute or characteristic of an observation that you can measure, count, or describe'>variable</a>, and the information in each cell is a single <a href='https://psyteachr.github.io/glossary/v#value' target='_blank' class='glossary' title='A single number or piece of data.'>value</a>. We'll learn more about how to get our data into this format in @sec-tidy, but to get started we'll use datasets with the right format.\n\nFor example, the table below lists pets owned by members of the psyTeachR team. Each row is an observation of one pet. There are 6 variables for each pet, their `name`, `owner`, `species`, `birthdate`, `weight` (in kg), and `rating` (on a 5-point scale from \"very evil\" to \"very good\").\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|name     |owner |species |birthdate  | weight|rating        |\n|:--------|:-----|:-------|:----------|------:|:-------------|\n|Darwin   |Lisa  |ferret  |1998-04-02 |    1.2|a little evil |\n|Oy       |Lisa  |ferret  |NA         |    2.9|very good     |\n|Khaleesi |Emily |cat     |2014-10-01 |    4.5|very good     |\n|Bernie   |Phil  |dog     |2017-06-01 |   32.0|very good     |\n\n</div>\n:::\n:::\n\n\n\n\nVariables can be classified as <a href='https://psyteachr.github.io/glossary/c#continuous' target='_blank' class='glossary' title='Data that can take on any values between other existing values.'>continuous</a> (numbers) or <a href='https://psyteachr.github.io/glossary/c#categorical' target='_blank' class='glossary' title='Data that can only take certain values, such as types of pet.'>categorical</a> (labels). When you're plotting data, it's important to know what kind of variables you have, which can help you decide what types of plots are most appropriate. Each variable also has a <a href='https://psyteachr.github.io/glossary/d#data-type' target='_blank' class='glossary' title='The kind of data represented by an object.'>data type</a>, such as <a href='https://psyteachr.github.io/glossary/n#numeric' target='_blank' class='glossary' title='A data type representing a real decimal number or integer.'>numeric</a> (numbers), <a href='https://psyteachr.github.io/glossary/c#character' target='_blank' class='glossary' title='A data type representing strings of text.'>character</a> (text), or <a href='https://psyteachr.github.io/glossary/l#logical' target='_blank' class='glossary' title='A data type representing TRUE or FALSE values.'>logical</a> (TRUE/FALSE values). Some plots can only work on some data types. Additionally, @sec-data-types has more details, as this concept will be relevant repeatedly.\n\n\n![Data types are like the categories when you format cells in Excel.](images/appx/excel-format-cells.png){#fig-excel-format-cells}\n\n### Continuous\n\n<a href='https://psyteachr.github.io/glossary/c#continuous' target='_blank' class='glossary' title='Data that can take on any values between other existing values.'>Continuous</a> variables are properties you can measure, like weight. You can use continuous variables in mathematical operations, like calculating the sum total of a column of prices or the average number of social media likes per day. They may be rounded to the nearest whole number, but it should make sense to have a measurement halfway between.\n\nContinuous variables always have a <a href='https://psyteachr.github.io/glossary/n#numeric' target='_blank' class='glossary' title='A data type representing a real decimal number or integer.'>numeric</a> data type. They are either <a href='https://psyteachr.github.io/glossary/i#integer' target='_blank' class='glossary' title='A data type representing whole numbers.'>integers</a> like `42` or <a href='https://psyteachr.github.io/glossary/d#double' target='_blank' class='glossary' title='A data type representing a real decimal number'>doubles</a> like `3.14159`. \n\n### Categorical {#sec-categorical}\n\n<a href='https://psyteachr.github.io/glossary/c#categorical' target='_blank' class='glossary' title='Data that can only take certain values, such as types of pet.'>Categorical</a> variables are properties you can count, like the species of pet. Categorical variables can be <a href='https://psyteachr.github.io/glossary/n#nominal' target='_blank' class='glossary' title='Categorical variables that don't have an inherent order, such as types of animal.'>nominal</a>, where the categories don't really have an order, like cats, dogs and ferrets (even though ferrets are obviously best), or <a href='https://psyteachr.github.io/glossary/o#ordinal' target='_blank' class='glossary' title='Discrete variables that have an inherent order, such as level of education or dislike/like.'>ordinal</a>, where they have a clear order but the distance between the categories isn't something you could exactly equate, like points on a <a href='https://psyteachr.github.io/glossary/l#likert' target='_blank' class='glossary' title='A rating scale with a small number of discrete points in order'>Likert</a> rating scale. Even if a data table uses numbers like 1-7 to represent ordinal variables, you shouldn't treat them like continuous variables.\n\nCategorical data can have a <a href='https://psyteachr.github.io/glossary/c#character' target='_blank' class='glossary' title='A data type representing strings of text.'>character</a> data type, also called <a href='https://psyteachr.github.io/glossary/s#string' target='_blank' class='glossary' title='A piece of text inside of quotes.'>strings</a>. These are made by putting text inside of quotes. That text can be letters, punctuation, or even numbers. For example, `\"January\"` is a character string, but so is `\"1\"` if you put it in quotes. The character data type is best for variables that can have a lot of different values that you can't predict ahead of time.\n\nCategorical data can also be <a href='https://psyteachr.github.io/glossary/f#factor' target='_blank' class='glossary' title='A data type where a specific set of values are stored with labels; An explanatory variable manipulated by the experimenter'>factors</a>, a specific type of integer that lets you specify the category names and their order. This is useful for making plots display with categories in the order you want (otherwise they default to alphabetical order). The factor data type is best for categories that have a specific number of levels.\n\n::: {.callout-caution}\n## Do not factor numbers\n\nIf you factor numeric data, it gets converted to the integers 1 to the number of unique values, no matter what the values are. Additionally, you can no longer use the values as numbers, such as calculating the mean.\n\n\n\n\n::: {.cell filename='Example'}\n\n```{.r .cell-code}\nx <- c(-3, 0, .5)  # numeric vector\nf <- factor(x)     # convert to factor\nx == as.numeric(f) # does not convert back to numeric \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE FALSE\n```\n\n\n:::\n:::\n\n::: {.cell filename='You cannot average a factor'}\n\n```{.r .cell-code}\nm <- mean(f)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in mean.default(f): argument is not numeric or logical: returning NA\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\nSometimes people represent categorical variables with numbers that correspond to names, like 0 = \"no\" and 1 = \"yes\", but values in between don't have a clear interpretation. If you have control over how the data are recorded, it's better to use the character names for clarity. You'll learn how to recode columns in @sec-wrangle.\n\n### Dates and times\n\nDates and times are a special case of variable. They can act like categorical or continuous variables, and there are special ways to plot them. Dates and times can be hard to work with, but the [<pkg>lubridate</pkg>](https://lubridate.tidyverse.org/) package provides functions to help you with this.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the current date\nlubridate::today()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-08-11\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# the current date and time in the GMT timezone\nlubridate::now(tzone = \"GMT\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-08-11 13:44:37 GMT\"\n```\n\n\n:::\n:::\n\n\n\n\n::: {.try}\nComing back to the pets dataset, what type of variable is in each column? You can use the function `glimpse()` to show a list of the column names, their data types, and the first few values in each column - here is the output of running `glimpse()` on the pets dataset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(pets)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 4\nColumns: 6\n$ name      <chr> \"Darwin\", \"Oy\", \"Khaleesi\", \"Bernie\"\n$ owner     <chr> \"Lisa\", \"Lisa\", \"Emily\", \"Phil\"\n$ species   <fct> ferret, ferret, cat, dog\n$ birthdate <date> 1998-04-02, NA, 2014-10-01, 2017-06-01\n$ weight    <dbl> 1.2, 2.9, 4.5, 32.0\n$ rating    <fct> a little evil, very good, very good, very good\n```\n\n\n:::\n:::\n\n\n\n\n\n\n| Column      | Variable type | Data type     |\n|:------------|:--------------|:--------------|\n| `name`      | <select class='webex-select'><option value='blank'></option><option value='x'>continuous</option><option value='answer'>nominal</option><option value='x'>ordinal</option><option value='x'>date</option></select>  | <select class='webex-select'><option value='blank'></option><option value='x'>numeric</option><option value='answer'>character</option><option value='x'>factor</option><option value='x'>date</option></select>  |\n| `owner`     | <select class='webex-select'><option value='blank'></option><option value='x'>continuous</option><option value='answer'>nominal</option><option value='x'>ordinal</option><option value='x'>date</option></select>  | <select class='webex-select'><option value='blank'></option><option value='x'>numeric</option><option value='answer'>character</option><option value='x'>factor</option><option value='x'>date</option></select>  |\n| `species`   | <select class='webex-select'><option value='blank'></option><option value='x'>continuous</option><option value='answer'>nominal</option><option value='x'>ordinal</option><option value='x'>date</option></select>  | <select class='webex-select'><option value='blank'></option><option value='x'>numeric</option><option value='x'>character</option><option value='answer'>factor</option><option value='x'>date</option></select> |\n| `birthdate` | <select class='webex-select'><option value='blank'></option><option value='x'>continuous</option><option value='x'>nominal</option><option value='x'>ordinal</option><option value='answer'>date</option></select> | <select class='webex-select'><option value='blank'></option><option value='x'>continuous</option><option value='x'>nominal</option><option value='x'>ordinal</option><option value='answer'>date</option></select> |\n| `weight`    | <select class='webex-select'><option value='blank'></option><option value='answer'>continuous</option><option value='x'>nominal</option><option value='x'>ordinal</option><option value='x'>date</option></select> | <select class='webex-select'><option value='blank'></option><option value='answer'>numeric</option><option value='x'>character</option><option value='x'>factor</option><option value='x'>date</option></select>  |\n| `rating`    | <select class='webex-select'><option value='blank'></option><option value='x'>continuous</option><option value='x'>nominal</option><option value='answer'>ordinal</option><option value='x'>date</option></select>  | <select class='webex-select'><option value='blank'></option><option value='x'>numeric</option><option value='x'>character</option><option value='answer'>factor</option><option value='x'>date</option></select> |\n\n:::\n\n\n\n## Building plots {#sec-plots}\n\n\n\n\n\n\n\n\n\nThere are multiple approaches to data visualisation in R; in this course we will use the popular package <pkg>ggplot2</pkg>, which is part of the larger <pkg>tidyverse</pkg> collection of packages. A grammar of graphics (the \"gg\" in \"ggplot\") is a standardised way to describe the components of a graphic. <pkg>ggplot2</pkg> uses a layered grammar of graphics, in which plots are built up in a series of layers. It may be helpful to think about any plot as having multiple elements that sit semi-transparently over each other. A good analogy is old Disney movies where artists would create a background and then add moveable elements on top of the background via transparencies.\n\n@fig-layers displays the evolution of a simple scatterplot using this layered approach. First, the plot space is built (layer 1); the variables are specified (layer 2); the type of visualisation (known as a `geom`) that is desired for these variables is specified (layer 3) - in this case `geom_point()` is called to visualise individual data points; a second geom is added to include a line of best fit (layer 4), the axis labels are edited for readability (layer 5), and finally, a theme is applied to change the overall appearance of the plot (layer 6).\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError in loadNamespace(x): there is no package called 'ggthemes'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Incompatible methods (\"+.gg\", \"Ops.factor\") for \"+\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in a + b + c + d + e + f: non-numeric argument to binary operator\n```\n\n\n:::\n:::\n\n\n\n\nImportantly, each layer is independent and independently customisable. For example, the size, colour and position of each component can be adjusted, or one could, for example, remove the first geom (the data points) to only visualise the line of best fit, simply by removing the layer that draws the data points (@fig-remove-layer). The use of layers makes it easy to build up complex plots step-by-step, and to adapt or extend plots from existing code.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError in loadNamespace(x): there is no package called 'ggthemes'\n```\n\n\n:::\n:::\n\n\n\n\n### Loading data {#sec-plots-loading-data}\n\nLet's build up the plot above, layer by layer. First we need to get the data. We'll learn how to load data from different sources in @sec-data, but this time we'll use the same method as we did in @sec-loading-online and load it from an online source. \n\n::: {.try}\nLoad the survey data by copying the following into a code block in your script, and running the code.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_data <- read_csv(\"https://psyteachr.github.io/reprores-v5/data/survey_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Failed to open\n'https://psyteachr.github.io/reprores-v5/data/survey_data.csv': The requested\nURL returned error: 404\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in open.connection(structure(4L, class = c(\"curl\", \"connection\"), conn_id = <pointer: 0x11e6e5db0>), : cannot open the connection\n```\n\n\n:::\n:::\n\n\n\n:::\n\nWhen you load the data, `read_csv()` will produce a message that gives you information about the data it has imported and what assumptions it has made. The \"column specification\" tells you what each column is named and what type of data R has categorised each variable as. The abbreviation \"chr\" is for <a href='https://psyteachr.github.io/glossary/c#character' target='_blank' class='glossary' title='A data type representing strings of text.'>character</a> columns, \"dbl\" is for <a href='https://psyteachr.github.io/glossary/d#double' target='_blank' class='glossary' title='A data type representing a real decimal number'>double</a> columns, and \"dttm\" is a date/time column.\n\nThis data is simulated data for a call centre customer satisfaction survey. The first thing you should do when you need to plot data is to get familiar with what all of the rows (observations) and columns (variables) mean. Sometimes this is obvious, and sometimes it requires help from the data provider. Here, each row represents one call to the centre.\n\n* `caller_id` is a unique ID for each caller\n* `employee_id` is a unique ID for each employee taking calls\n* `call_start` is the date and time that the call arrived\n* `wait_time` is the number of seconds the caller had to wait\n* `call_time` is the number of seconds the call lasted after the employee picked up\n* `issue_category` is whether the issue was tech, sales, returns, or other\n* `satisfaction` is the customer satisfaction rating on a scale from 1 (very unsatisfied) to 5 (very satisfied)\n\nUnless you specify the column types, data importing functions will just guess the types and usually default to double for columns with numbers and character for columns with letters. \n\n::: {.try}\nUse the function `spec()` to find out all of the column types and edit them if needed.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspec(survey_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_character(),\n  satisfaction = col_double()\n)\n```\n\n\n:::\n:::\n\n\n\n:::\n\nLet's set `issue_category` as a factor and set the order of the levels. By default, R will order the levels of a factor alphanumerically, however in many cases you will want or need to set your own order. For example, in this data, it makes most sense for the category \"other\" to come at the end of the list. After you update the column types, you have to re-import the data by adjusting the `read_csv()` code to set the `col_types` argument to the new column types.\n\n::: {.try}\nUpdate your data import code block to look like the one below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# updated column types\nsurvey_col_types <- cols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\")),\n  satisfaction = col_integer()\n)\n\n# re-import data with correct column  types\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\",\n                        col_types = survey_col_types)\n```\n:::\n\n\n\n\n:::\n\n::: {.callout-caution}\n## Define objects before you use them\n\nBecause `read_csv()` is going to use the object `survey_col_types`, you must create `survey_col_types` before you run the adjusted `read_csv()` code. If you ever need to adjust your code, try to think about the order that the code will run in if you start from scratch and make sure it's organised appropriately.\n:::\n\n\n### Plot setup\n\n#### Default theme\n\nPlots in this book use the black-and-white theme, not the default grey theme, so set your default theme to the same so your plots will look like the examples below. At the top of your script, in the setup chunk after you've loaded the tidyverse package, add the following code and run it. You'll learn more ways to customise your theme in @sec-themes and @sec-themes-appendix.\n\n::: {.try}\nAdd this code to your setup chunk. It needs to run before you make any plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_bw()) # set the default theme\n```\n:::\n\n\n\n:::\n\n#### Data {#sec-plot-setup-data}\n\nEvery plot starts with the `ggplot()` function and a data table. If your data are not loaded or you have a typo in your code, this will give you an error message. It's best to check your plot after each step, so that you can figure out where errors are more easily.\n\n::: {.try}\nCreate a blank plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = survey_data)\n```\n\n::: {.cell-output-display}\n![](images/figures/img-build-plot-1.png){width=100%}\n:::\n:::\n\n\n\n:::\n\n#### Mapping\n\nThe next <a href='https://psyteachr.github.io/glossary/a#argument' target='_blank' class='glossary' title='A variable that provides input to a function.'>argument</a> to `ggplot()` is the `mapping`. This tells the plot which columns in the data should be represented by, or \"mapped\" to, different aspects of the plot, such as the x-axis, y-axis, line colour, object fill, or line style. These aspects, or \"aesthetics\", are listed inside the `aes()` function.\n\n::: {.try}\nSet the arguments `x` and `y` to the names of the columns you want to be plotted on those axes. Here, we want to plot the wait time on the x-axis and the call time on the y-axis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up the plot with mapping\nggplot(\n  data = survey_data, \n  mapping = aes(x = wait_time, y = call_time)\n)\n```\n\n::: {.cell-output-display}\n![](images/figures/img-build-plot-mapping-1.png){width=100%}\n:::\n:::\n\n\n\n:::\n\nIn the example above, we wrote out the names of the <a href='https://psyteachr.github.io/glossary/a#argument' target='_blank' class='glossary' title='A variable that provides input to a function.'>arguments</a> `data` and `mapping`, but in practice, almost everyone omits them. Just make sure you put the data and mapping in the right order.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data,  aes(x = wait_time, y = call_time))\n```\n:::\n\n\n\n\n#### Geoms\n\nNow we can add our plot elements in layers. These are referred to as <a href='https://psyteachr.github.io/glossary/g#geom' target='_blank' class='glossary' title='The geometric style in which data are displayed, such as boxplot, density, or histogram.'>geoms</a> and their functions start with `geom_`. You **add** layers onto the base plot created by `ggplot()` with a plus (`+`). \n\n::: {.try}\nAdd a scatterplot to your plot using `geom_point()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point() # scatterplot\n```\n\n::: {.cell-output-display}\n![](images/figures/img-build-plot-labels-1.png){width=100%}\n:::\n:::\n\n\n\n:::\n\n::: {.callout-caution}\n## Location of the +\n\nSomewhat annoyingly, the plus has to be on the end of the previous line, not at the start of the next line. If you do make this mistake, it will run the first line of code to produce the base layer but then you will get the following error message rather than adding on `geom_point()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time, y = call_time))\n```\n\n::: {.cell-output-display}\n![](images/figures/unnamed-chunk-14-1.png){width=100%}\n:::\n\n```{.r .cell-code}\n+ geom_point() # scatterplot\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError:\n! Cannot use `+` with a single argument.\nℹ Did you accidentally put `+` on a new line?\n```\n\n\n:::\n:::\n\n\n\n:::\n\n#### Multiple geoms\n\nPart of the power of <pkg>ggplot2</pkg> is that you can add more than one geom to a plot by adding on extra layers and so it quickly becomes possible to make complex and informative visualisations. Importantly, the layers display in the order you set them up. The code below uses the same geoms to produce a scatterplot with a line of best fit, but orders them differently.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Points first\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point() + # scatterplot\n  geom_smooth(method = lm) # line of best fit\n\n# Line first\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_smooth(method = lm) + # line of best fit\n  geom_point() # scatterplot\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Points first versus line first.](images/figures/fig-build-plot-geom2-1.png){#fig-build-plot-geom2 width=100%}\n:::\n:::\n\n\n\n\n:::{.try}\nAdd another geom to your plot. Add another code block and copy the plot code, changing the order of geoms. Do they look different?\n:::\n\n#### Plot objects\n\nJust like you can save numbers and data tables to objects, you can also save the output of `ggplot()`. The code below produces the same plots we created above but saves them to objects named `point_first` and `line_first`. If you run just this code, the plots won't display like they have done before. Instead, you'll see the object names appear in the environment pane.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoint_first <- \n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point() + # scatterplot\n  geom_smooth(method = lm) # line of best fit\n  \nline_first <-\n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_smooth(method = lm) + # line of best fit\n  geom_point() # scatterplot\n```\n:::\n\n\n\n\nTo view the plots, call the objects by name. This will output each plot separately.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoint_first # view first plot\nline_first # view second plot\n```\n:::\n\n\n\n\n:::{.try}\nSave your two plots to objects with appropriate names.\n:::\n\n\n#### Combining plots\n\nOne of the reasons to save your plots to objects is so that you can combine multiple plots using functions from the `patchwork` package. The  code below produces the plot above by combining the two plots with `+` and then specifying that we want the plots produced on a single row with the `nrow` argument in `plot_layout()`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add plots together in 1 row\npoint_first + line_first + plot_layout(nrow = 1)\n```\n\n::: {.cell-output-display}\n![Combining plots with patchwork.](images/figures/fig-build-plot-geom2b-1.png){#fig-build-plot-geom2b width=100%}\n:::\n:::\n\n\n\n\n::: {.try}\nCombine your plots using `plot_layout()`. Try changing the value of `nrow` to 2.\n:::\n\n\n### Customising plots\n\nThere are nearly endless ways to customise ggplots. We'll cover a few of the basic customisations here.\n\n#### Styling geoms\n\nWe should definitely put the line in front of the points, but the points are still a bit dark. If you want to change the overall style of a geom, you can set the arguments `colour`, `alpha`, `shape`, `size` and `linetype` inside the geom function. There are many different values that you can set these to; @sec-plotstyle gives details of these. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2, # 20% transparency\n             shape = 18,  # solid diamond\n             size = 2) + \n  # setting method & formula avoids an annoying message\n  geom_smooth(method = lm,   # method of linear model (lm)\n              formula = y~x, # formula used to draw line\n              colour = rgb(0, .5, .8),\n              linetype = 3) \n```\n\n::: {.cell-output-display}\n![Changing geom styles.](images/figures/fig-build-plot-style-1.png){#fig-build-plot-style width=100%}\n:::\n:::\n\n\n\n\n:::{.try}\nPlay around with different values above and figure out what the <a href='https://psyteachr.github.io/glossary/d#default-value' target='_blank' class='glossary' title='A value that a function uses for an argument if it is skipped.'>default values</a> are for `shape` and `size`. \n:::\n\n::: {.callout-warning}\n## Setting aesthetics overall versus by category\n\nThis method is only for changing the style of *all* the shapes made with that geom. If you want, for example, points to have different colours depending on which issue category they are from, you set the argument `colour = issue_category` inside the `aes()` function for the mapping. You can customise the colours used with `scale_` functions, which you will learn about below and in @sec-plotstyle.\n:::\n\n#### Format axes\n\nNow we need to make the axes look neater. There are several functions you can use to change the axis labels, but the most powerful ones are the `scale_` functions. You need to use a scale function that matches the data you're plotting on that axis and this is where it becomes particularly important to know what type of data you're working with. Both of the axes here are <a href='https://psyteachr.github.io/glossary/c#continuous' target='_blank' class='glossary' title='Data that can take on any values between other existing values.'>continuous</a>, so we'll use `scale_x_continuous()` and `scale_y_continuous()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  # customise axis labels and breaks\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = seq(from = 0, to = 600, by = 60))\n```\n\n::: {.cell-output-display}\n![Formatting plot axes with scale_ functions.](images/figures/fig-build-plot-axes-1.png){#fig-build-plot-axes width=100%}\n:::\n:::\n\n\n\n\nThe `name` argument changes the axis label. The `breaks` argument sets the major units and needs a <a href='https://psyteachr.github.io/glossary/v#vector' target='_blank' class='glossary' title='A type of data structure that collects values with the same data type, like T/F values, numbers, or strings.'>vector</a> of possible values, which can extend beyond the range of the data (e.g., `wait time` only goes up to 350, but we can specify breaks up to 600 to make the maths easier or anticipate updates to the data). The `seq()` function creates a sequence of numbers `from` one `to` another `by` specified steps.\n\n\n\n\n::: {.cell filename='Example of seq()'}\n\n```{.r .cell-code}\nseq(from = 0, to = 600, by = 60)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   0  60 120 180 240 300 360 420 480 540 600\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {.try}\nSet the y-axis name to \"Call Time (seconds) and the breaks to every 60 seconds with minor breaks every 15 seconds. Check the help for `?scale_y_continuous` to see how you would set the minor units.\n\n\n\n\n\n::: {.cell webex.hide='true'}\n\n<div class='webex-solution'><button>Solution</button>\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  # customise axis labels and breaks\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Call Time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 60),    \n                     minor_breaks = seq(from = 0, to = 600, by = 15))\n```\n\n::: {.cell-output-display}\n![](images/figures/unnamed-chunk-18-1.png){width=100%}\n:::\n\n\n</div>\n:::\n\n\n\n:::\n\n\n#### Axis limits\n\nIf you want to change the minimum and maximum values on an axis, use the `coord_cartesian()` function. Many plots make more sense if the minimum and maximum values represent the range of possible values, even if those values aren't present in the data. Here, wait and call times can't be less than 0 seconds, so we'll set the minimum values to 0 and the maximum values to the first break above the highest value.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Call Time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 60),    \n                     minor_breaks = seq(from = 0, to = 600, by = 15)) +\n  # set axis limits\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180))\n```\n\n::: {.cell-output-display}\n![Changing the axis limits.](images/figures/fig-build-plot-limits-1.png){#fig-build-plot-limits width=100%}\n:::\n:::\n\n\n\n\n::: {.callout-important}\n## Setting limits with the scale_ function\n\nYou can also set the `limits` argument inside  the `scale_` functions, but this actually removes any data that falls outside these limits, rather than cropping your plot, and this can change the appearance of certain types of plots like violin plots and density plots.\n:::\n\n#### Themes {#sec-themes}\n\n<pkg>ggplot2</pkg> comes with several built-in themes, such as `theme_minimal()` and `theme_bw()`, but the [<pkg>ggthemes</pkg>](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) package provides even more themes to match different software, such as GoogleDocs or Stata, or publications, such as the Economist or the Wall Street Journal. Let's add the GoogleDocs theme, but change the font size to 20 with the `base_size` argument.\n\nIt's also worth highlighting that this code is starting to look quite complicated because of the number of layers, but because we've built it up slowly it should (hopefully!) make sense. If you see examples of <pkg>ggplot2</pkg> code online that you'd like to adapt, build the plot up layer by layer and it will make it easier to understand what each layer adds.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30)) +\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180)) +\n  # change the theme\n  ggthemes::theme_gdocs(base_size = 20)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in loadNamespace(x): there is no package called 'ggthemes'\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### Theme tweaks\n\nIf you're still not quite happy with a theme, you can customise it even further with the `themes()` function. Check the help for this function to see all of the possible options. The most common thing you'll want to do is to remove an element entirely. You do this by setting the relevant argument to `element_blank()`. Below, we're getting rid of the x-axis line and the plot background, which removes the line around the plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30)) +\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180)) +\n  theme_gdocs(base_size = 11) +\n  # customise theme elements\n  theme(axis.line.x = element_blank(),\n        plot.background = element_blank())\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in theme_gdocs(base_size = 11): could not find function \"theme_gdocs\"\n```\n\n\n:::\n:::\n\n\n\n\n### Figure captions {#sec-captions}\n\nYou can add a caption directly to the image using the `labs()` function, which also allows you to add or edit the title, subtitle, and axis labels.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30)) +\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180)) +\n  theme_gdocs(base_size = 11) +\n  theme(axis.line.x = element_blank(),\n        plot.background = element_blank()) +\n  labs(title = \"The relationship between wait time and call time\",\n       subtitle = \"2020 Call Data\",\n       caption = \"Figure 1. As wait time increases, call time increases.\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in theme_gdocs(base_size = 11): could not find function \"theme_gdocs\"\n```\n\n\n:::\n:::\n\n\n\n\nHowever, it is more accessible to include this sort of information in plain text for screen readers. You can add a text caption in the chunk header. You can also add alt-text descriptions for screen readers that describe the image.\n\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: fig-wait-vs-call\n#| fig-cap: \"As wait time increases, call time increases.\"\n#| fig-alt: \"A scatterplot showing wait time on the x-axis (range 0-360 seconds) and call time on the y-axis (range 0-180 seconds) with a trend line showing that as wait time increases, call time increases from about 60 wait/30 call to about 300 wait/65 call.\"\n\n# figure code here\n```\n````\n:::\n\n\n\n\n\n### Saving Plots {#sec-ggsave}\n\nYou can save a ggplot using `ggsave()`. It saves the last ggplot you made, by default, but you can specify which plot you want to save if you assigned that plot to a variable.\n\nYou can set the `width` and `height` of your plot. The default units are inches, but you can change the `units` argument to \"in\", \"cm\", or \"mm\".\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbox <- ggplot(pets, aes(pet, score, fill=pet)) +\n  geom_boxplot(alpha = 0.5)\n\nviolin <- ggplot(pets, aes(pet, score, fill=pet)) +\n  geom_violin(alpha = 0.5)\n\nggsave(\"demog_violin_plot.png\", width = 5, height = 7)\n\nggsave(\"demog_box_plot.jpg\", plot = box, width = 5, height = 7)\n```\n:::\n\n\n\n\n::: {.callout-note}\nThe file type is set from the filename suffix, or by \nspecifying the argument `device`, which can take the following values: \n\"eps\", \"ps\", \"tex\", \"pdf\", \"jpeg\", \"tiff\", \"png\", \"bmp\", \"svg\" or \"wmf\".\n:::\n\n## Appropriate plots {#sec-appropriate-plots}\n\nNow that you know how to build up a plot by layers and customise its appearance, you're ready to learn about some more plot types. Different types of data require different types of plots, so this section is organised by data type. \n\nThe [ggplot2 cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf) is a great resource to help you find plots appropriate to your data, based on how many variables you're plotting and what type they are. The examples below all use the same customer satisfaction data, but each plot communicates something different. \n\nWe don't expect you to memorise all of the plot types or the methods for customising them, but it will be helpful to try out the code in the examples below for yourself, changing values to test your understanding.\n\n### Counting categories\n\n#### Bar plot\n\nIf you want to count the number of things per category, you can use `geom_bar()`. You only need to provide a `x` mapping to `geom_bar()` because by default `geom_bar()` uses the number of observations in each group of `x` as the value for `y`, so you don't need to tell it what to put on the y-axis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = issue_category)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![A basic bar plot.](images/figures/fig-bar-1.png){#fig-bar width=100%}\n:::\n:::\n\n\n\n\n::: {.try}\nYou probably want to customise some things, like the colours, order of the columns, and their labels. Inspect the code below and try running it layer by layer to figure out where these things change. The functions `scale_fill_manual()` and `scale_x_discrete()` are new, but work in the same way as the other `scale_` functions. You'll learn more about this in @sec-custom-viz.\n\n\n\n\n::: {.cell webex.hide='Code'}\n\n<div class='webex-solution'><button>Code</button>\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = issue_category, \n                        fill = issue_category)) +\n  geom_bar() +\n  scale_x_discrete(\n    # change axis title\n    name = \"Issue Category\", \n    # change order\n    limits = c(\"tech\", \"returns\", \"sales\", \"other\"), \n    # change labels\n    labels = c(\"Technical\", \"Returns\", \"Sales\", \"Other\") \n  ) +\n  scale_fill_manual(\n    # change colours\n    values = c(tech = \"goldenrod\", \n                returns = \"darkgreen\", \n                sales = \"dodgerblue3\", \n                other = \"purple3\"),\n    # remove the legend\n    guide = \"none\" \n  ) +\n  scale_y_continuous(\n    name = \"\", # remove axis title\n    # remove the space above and below the y-axis\n    expand = expansion(add = 0)\n  ) +\n  # minimum = 0, maximum = 350\n  coord_cartesian(ylim = c(0, 350)) + \n  ggtitle(\"Number of issues per category\") # add a title\n```\n\n::: {.cell-output-display}\n![](images/figures/custom-bar-1.png){width=100%}\n:::\n\n\n</div>\n:::\n\n\n\n:::\n\n#### Column plot\n\nIf your data already have a column with the number you want to plot, you can use `geom_col()` to plot it. We can use the `count()` function to make a table with a row for each `issue_category` and a column called `n` with the number of observations in that category.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_data <- count(survey_data, issue_category)\n```\n:::\n\n\n\n\n<div class=\"kable-table\">\n\n|issue_category |   n|\n|:--------------|---:|\n|tech           | 311|\n|sales          |  88|\n|returns        | 232|\n|other          |  76|\n\n</div>\n\nThe mapping for `geom_col()` requires you to set both the `x` and `y` aesthetics. Set `y = n` because we want to plot the number of issues in each category, and that information is in the column called `n`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(count_data, aes(x = issue_category, y = n)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![A basic column plot.](images/figures/fig-col-1.png){#fig-col width=100%}\n:::\n:::\n\n\n\n\n\n#### Pie chart\n\nPie charts are a [misleading form of data visualisation](https://www.data-to-viz.com/caveat/pie.html), so we won't cover them. We'll cover options for visualising proportions, like waffle, lollipop and treemap plots, in @sec-other-plots.\n\n::: {.try}\n\n\n\n\n\n\n\n\n\n\nTest your understanding; here is a small data table.\n\ncountry             | population      | island\n:-------------------|----------------:|:--------------\nNorthern Ireland    | 1,895,510       | Ireland\nWales               | 3,169,586       | Great Britain\nRepublic of Ireland | 4,937,786       | Ireland\nScotland            | 5,466,000       | Great Britain\nEngland             | 56,550,138      | Great Britain\n\n\n* What geom would you use to plot the population for each of the 5 countries? <select class='webex-select'><option value='blank'></option><option value='x'>geom_bar</option><option value='answer'>geom_col</option></select>\n\n\n\n* What mapping would you use?  <div class='webex-radiogroup' id='radio_WBBSBBPHUU'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_WBBSBBPHUU\" value=\"answer\"></input> <span>aes(x = country, y = population)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_WBBSBBPHUU\" value=\"x\"></input> <span>aes(x = population, y = country)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_WBBSBBPHUU\" value=\"x\"></input> <span>aes(x = country)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_WBBSBBPHUU\" value=\"x\"></input> <span>aes(x = island)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_WBBSBBPHUU\" value=\"x\"></input> <span>aes(y = population)</span></label></div>\n\n\n\n* What geom would you use to plot the number of countries on each island? <select class='webex-select'><option value='blank'></option><option value='answer'>geom_bar</option><option value='x'>geom_col</option></select>\n\n\n\n* What mapping would you use?  <div class='webex-radiogroup' id='radio_GBKVZPSPFF'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_GBKVZPSPFF\" value=\"x\"></input> <span>aes(x = country, y = population)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_GBKVZPSPFF\" value=\"x\"></input> <span>aes(x = population, y = country)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_GBKVZPSPFF\" value=\"x\"></input> <span>aes(x = country)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_GBKVZPSPFF\" value=\"answer\"></input> <span>aes(x = island)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_GBKVZPSPFF\" value=\"x\"></input> <span>aes(y = population)</span></label></div>\n\n\n\n:::\n\n### One continuous variable {#sec-histogram}\n\nIf you have a continuous variable, like the number of seconds callers have to wait, you can use `geom_histogram()` to show the distribution. Just like `geom_bar()` you are only required to specify the `x` variable. \n\nA histogram splits the data into \"bins\" along the x-axis and shows the count of how many observations are in each bin along the y-axis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![Histogram of wait times.](images/figures/fig-histogram-1.png){#fig-histogram width=100%}\n:::\n:::\n\n\n\n\nYou should always set the `binwidth` or number of `bins` to something meaningful for your data (otherwise you get the annoying message above). You might need to try a few options before you find something that looks good and conveys the meaning of your plot -- try changing the values of `binwidth` and `bins` below to see what works best.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# adjust width of each bar\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(binwidth = 30)\n\n# adjust number of bars\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(bins = 5)\n```\n:::\n\n\n\n\n\nBy default, the bars start *centered* on 0, so if `binwidth` is set to 30, the first bar would include -15 to 15 seconds, which doesn't make much sense. We can set `boundary = 0` so that each bar represents increments of 30 seconds *starting* from 0. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(binwidth = 30, boundary = 0)\n```\n\n::: {.cell-output-display}\n![A histogram with the boundary set to 0.](images/figures/fig-histogram-boundary0-1.png){#fig-histogram-boundary0 width=100%}\n:::\n:::\n\n\n\n\n\nFinally, the default style of grey bars is ugly, so you can change that by setting the `fill` and `colour`, as well as using `scale_x_continuous()` to update the axis labels. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(binwidth = 15, \n                 boundary = 0, \n                 fill = \"white\", \n                 color = \"black\") +\n  scale_x_continuous(name = \"Wait time (seconds)\",\n                     breaks = seq(0, 600, 60))\n```\n\n::: {.cell-output-display}\n![Histogram with custom styles.](images/figures/fig-histogram-custom-1.png){#fig-histogram-custom width=100%}\n:::\n:::\n\n\n\n\n::: {.try}\nTest your understanding\n\nImagine you have a table of the [population for each country in the world](https://population.un.org/wpp/Download/Standard/Population/) with the columns `country` and `population`. We'll just look at the 76 countries with populations of less than a million.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/figures/test-one-continuous-1.png){width=100%}\n:::\n:::\n\n* How would you set the mapping for this plot?  <div class='webex-radiogroup' id='radio_ORZXWWIPRR'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_ORZXWWIPRR\" value=\"x\"></input> <span>aes(x = country, y = population)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_ORZXWWIPRR\" value=\"x\"></input> <span>aes(x = population, y = country)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_ORZXWWIPRR\" value=\"answer\"></input> <span>aes(x = population)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_ORZXWWIPRR\" value=\"x\"></input> <span>aes(x = population, y = count)</span></label></div>\n\n\n\n* What is the `binwidth` of the histogram? <select class='webex-select'><option value='blank'></option><option value=''>1</option><option value=''>100</option><option value='answer'>100K</option><option value=''>1M</option></select>\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Axis label customisation\n\nIf you're curious how we got the x-axis labels to read \"100K\" instead of \"100000\", you just need to add a vector of `labels` the same length as `breaks`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  scale_x_continuous(breaks = seq(0, 1e6, 1e5),\n                     labels = c(paste0(0:9*100, \"K\"), \"1M\"))\n```\n:::\n\n\n\n:::\n\n### Grouped continuous variables\n\nThere are several ways to compare continuous data across groups. Which you choose depends on what point you are trying to make with the plot.\n\n#### Stacked histogram\n\nIn previous plots, we have used `fill` purely for visual reasons, e.g., we changed the colour of the histogram bars to make them look nicer. However, you can also use `fill` to represent another variable so that the colours become meaningful. \n\nSetting the `fill` aesthetic **in the mapping** will produce different coloured bars for each category of the `fill` variable, in this case `issue_category`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time, fill = issue_category)) +\n  geom_histogram(boundary = 0, \n                 binwidth = 15,\n                 color = \"black\")\n```\n\n::: {.cell-output-display}\n![Histogram with categories represented by fill.](images/figures/unnamed-chunk-25-1.png){width=100%}\n:::\n:::\n\n\n\n\n\n::: {.callout-warning}\n## Arguments inside aes()\n\nWhen you set an aspect to represent the data, you do this inside the `aes()` function for the mapping, not as an argument to the geom. If you try to set this in a geom, you'll get the following error (unless you coincidentally have an object named `issue_category` that is a colour word).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(boundary = 0, \n                 binwidth = 15, \n                 color = \"black\",\n                 fill = issue_category)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'issue_category' not found\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Area plot alternative\n\nThe function `geom_area()` gives a similar effect when `stat = \"bin\"`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# area plot\nggplot(survey_data, mapping = aes(x = wait_time, fill = issue_category)) +\n  geom_area(stat = \"bin\", \n            boundary = 0, \n            binwidth = 15, \n            color = \"black\")\n```\n\n::: {.cell-output-display}\n![Stacked area plot.](images/figures/unnamed-chunk-27-1.png){width=100%}\n:::\n:::\n\n\n\n\n:::\n\n#### Dodged histogram\n\nBy default, the categories are positioned stacked on top of each other. If you want to compare more than one distribution, you can set the `position` argument of `geom_histogram()` to \"dodge\" to put the bars for each group next to each other instead of stacking them. However, this can look confusing with several categories. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dodged histogram\nggplot(survey_data, aes(x = wait_time, \n                        fill = issue_category,\n                        colour = issue_category))+\n  geom_histogram(boundary = 0, \n                 binwidth = 15, \n                 position = \"dodge\") +\n  scale_x_continuous(name = \"Wait time (seconds)\",\n                     breaks = seq(0, 600, 60))\n```\n\n::: {.cell-output-display}\n![A histogram with multiple groups.](images/figures/fig-histogram-dodge-1.png){#fig-histogram-dodge width=100%}\n:::\n:::\n\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n## Frequency plot alternative\n\nAlternatively, you can use `geom_freqpoly()` to plot a line connecting the top of each bin.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# frequency plot\nggplot(survey_data, aes(x = wait_time,\n                        colour = issue_category)) +\n  geom_freqpoly(binwidth = 15, \n                boundary = 0,\n                size = 1) +\n  scale_x_continuous(name = \"Wait time (seconds)\",\n                     breaks = seq(0, 600, 60))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![A frequency plot with multiple groups.](images/figures/fig-groups-freqpoly-1.png){#fig-groups-freqpoly width=100%}\n:::\n:::\n\n\n\n\n:::\n\n#### Violin plot\n\nAnother way to compare groups of continuous variables is the violin plot. This is like a density plot, but rotated 90 degrees and mirrored - the fatter the violin, the larger proportion of data points there are at that value.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nviolin_area <- \n  ggplot(survey_data, aes(x = issue_category, y = wait_time)) +\n  geom_violin() +\n  ggtitle('scale = \"area\"')\n\nviolin_count <- \n  ggplot(survey_data, aes(x = issue_category, y = wait_time)) +\n  geom_violin(scale = \"count\") +\n  ggtitle('scale = \"count\"')\n\nviolin_area + violin_count\n```\n\n::: {.cell-output-display}\n![The default violin plot gives each shape the same area. Set scale='count' to make the size proportional to the number of observations.\"](images/figures/fig-violin-plot-1.png){#fig-violin-plot width=100%}\n:::\n:::\n\n\n\n\n#### Boxplot\n\nBoxplots serve a similar purpose to violin plots (without the giggles from the back row). They don't show you the shape of the distribution, but rather some statistics about it. The middle line represents the <a href='https://psyteachr.github.io/glossary/m#median' target='_blank' class='glossary' title='The middle number in a distribution where half of the values are larger and half are smaller.'>median</a>; half the data are above this line and half below it. The box encloses the 25th to 75th percentiles of the data, so 50% of the data falls inside the box. The \"whiskers\" extending above and below the box extend 1.5 times the height of the box, although you can change this with the `coef` argument. The points show <a href='https://psyteachr.github.io/glossary/o#outlier' target='_blank' class='glossary' title='A data point that is extremely distant from most of the other data points'>outliers</a> -- individual data points that fall outside of this range.\n\nBoxplots can be horizontal if you swap to x and y columns, and there are many other customisations you can apply.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot <- ggplot(survey_data, aes(x = issue_category, y = wait_time)) +\n geom_boxplot() +\n  ggtitle(\"Default vertical boxplot\")\n\ncustom <- ggplot(survey_data, aes(y = issue_category,x = wait_time)) +\n geom_boxplot(fill = \"grey80\", \n              outlier.colour = \"red\",\n              outlier.shape = 8,\n              coef = 1,   # length of whiskers relative to box\n              varwidth = TRUE, # set width proportional to sample size\n              notch = TRUE) +\n  ggtitle(\"Customised horizontal boxplot\")\n\nboxplot + custom\n```\n\n::: {.cell-output-display}\n![Boxplots.](images/figures/fig-box-plot-1.png){#fig-box-plot width=100%}\n:::\n:::\n\n\n\n\n\n#### Combo plots\n\nViolin plots are frequently layered with other geoms that represent the mean or median values in the data. This is a lot of code; to help your understanding,  run it layer by layer to see how it builds up and change the values throughout the code.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add fill and colour to the mapping\n\nggplot(survey_data,  aes(x = issue_category, \n                         y = wait_time,\n                         fill = issue_category,\n                         colour = issue_category)) +\n  scale_x_discrete(name = \"Issue Category\") +\n  scale_y_continuous(name = \"Wait Time (seconds)\",\n                     breaks = seq(0, 600, 60)) +\n  coord_cartesian(ylim = c(0, 360)) +\n  guides(fill = \"none\", colour = \"none\") + \n  # add a violin plot\n  geom_violin(draw_quantiles = 0.5, # adds a line at median (50%) score\n              alpha = 0.4) + \n  # add a boxplot\n  geom_boxplot(width = 0.25, \n               fill = \"white\", \n               alpha = 0.75, \n               fatten = 0, # removes the median line\n               outlier.alpha = 0) + \n  # add a point that represents the mean\n  stat_summary(fun = mean, \n               geom = \"point\", \n               size = 2) + \n  ggtitle(\"ViolinBox\")\n```\n\n::: {.cell-output-display}\n![Violin plots combined with different methods to represent means and medians.](images/figures/fig-violin-combos-1.png){#fig-violin-combos width=100%}\n:::\n:::\n\n\n\n\n::: {.callout-caution collapse=\"true\"}\n## Misleading Bar Charts\n\nA very common type of plot is to produce a bar chart of means, however, the example below demonstrates just how misleading this is. It communicates the mean value for each category, but the bars hide the distribution of the actual data. You can't tell if most wait times are close to 3 minutes, or spread from 0 to 6 minutes, or if the vast majority are less than 2 minutes, but the mean is pulled up by some very high outliers.\n\nColumn plots can also be very misleading. The plot on the left starts the y-axis at 0, which makes the bar heights proportional, showing almost no difference in average wait times. Since the differences are hard to see, you may be tempted to start the y-axis higher, but that makes it look like the average wait time for returns is double that for tech.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Don't plot continuous data with column plots. They are only appropriate for count data.](images/figures/fig-col-plot-bad-1.png){#fig-col-plot-bad width=100%}\n:::\n:::\n\n\n\n\n\n:::\n\n::: {.try}\nTest your understanding\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/figures/test-grouped-continuous-1.png){width=100%}\n:::\n:::\n\n\n\n\n* How would you create plot A? <select class='webex-select'><option value='blank'></option><option value='x'>geom_box()</option><option value='x'>geom_boxplot()</option><option value='answer'>geom_violin()</option><option value='x'>geom_violinplot()</option></select>\n* How would you create plot B? <select class='webex-select'><option value='blank'></option><option value='x'>geom_box()</option><option value='answer'>geom_boxplot()</option><option value='x'>geom_violin()</option><option value='x'>geom_violinplot()</option></select>\n* What does the mapping look like for both plots? <div class='webex-radiogroup' id='radio_BWVDROVSBZ'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_BWVDROVSBZ\" value=\"x\"></input> <span>aes(x = employee_id, y = call_time, colour = employee_id)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_BWVDROVSBZ\" value=\"x\"></input> <span>aes(x = employee_id, y = call_time, colour = call_time)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_BWVDROVSBZ\" value=\"x\"></input> <span>aes(x = employee_id, y = call_time, fill = call_time)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_BWVDROVSBZ\" value=\"answer\"></input> <span>aes(x = employee_id, y = call_time, fill = employee_id)</span></label></div>\n\n* Which employee has the longest median call time? <select class='webex-select'><option value='blank'></option><option value='x'>e01</option><option value='x'>e02</option><option value='x'>e03</option><option value='answer'>e04</option><option value='x'>e05</option><option value='x'>e06</option><option value='x'>e07</option><option value='x'>e08</option><option value='x'>e09</option><option value='x'>e10</option></select>\n* Which employee has the record longest call? <select class='webex-select'><option value='blank'></option><option value='x'>e01</option><option value='x'>e02</option><option value='x'>e03</option><option value='x'>e04</option><option value='x'>e05</option><option value='x'>e06</option><option value='answer'>e07</option><option value='x'>e08</option><option value='x'>e09</option><option value='x'>e10</option></select>\n:::\n\n\n### Two continuous variables\n\nWhen you want to see how two continuous variables are related, set one as the x-axis and the other as the y-axis. Usually, if one variable causes the other, you plot the cause on the x-axis and the effect on the y-axis. Here, we want to see if longer wait times cause the calls to be longer. \n\n#### Scatterplot\n\nThe function to create a scatterplot is called `geom_point()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![Scatterplot with geom_point().](images/figures/fig-demo-point-1.png){#fig-demo-point width=100%}\n:::\n:::\n\n\n\n\n#### Trendlines\n\nIn @fig-layers, we emphasised the relationship between wait time and call time with a trendline created by `geom_smooth()` using the argument `method = lm` (\"lm\" stands for \"linear model\" or a straight line relationship). You can also set `method = loess` to visualise a non-linear relationship.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_plot <- \n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(alpha = 0.2) +\n  geom_smooth(method = lm, formula = y~x) +\n  ggtitle(\"method = lm\")\n\nloess_plot <- \n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(alpha = 0.2) +\n  geom_smooth(method = loess, formula = y~x) +\n  ggtitle(\"method = loess\")\n\nlm_plot + loess_plot\n```\n\n::: {.cell-output-display}\n![Different ways to show the relationship between two continuous variables.](images/figures/fig-2-continuous-1.png){#fig-2-continuous width=100%}\n:::\n:::\n\n\n\n\n::: {.callout-warning}\n## Error shading\n\nIf there isn't much data at the extremes of the x-axis, the curve can be very uncertain. This is represented by the wider shaded area, which means that the true relationship might be anywhere within that area. Add the argument `se = FALSE` to `geom_smooth()` to remove this \"standard error\" shading.\n:::\n\n\n#### Dates\n\nThe `call_start` column contains both a date and a time, so use the `date()` function from <pkg>lubridate</pkg> to convert it to just a date. We'll need it in this format to be able to transform the x-axis below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = lubridate::date(call_start), \n                        y = satisfaction)) + \n  geom_smooth(method = lm, formula = y~x)\n```\n\n::: {.cell-output-display}\n![Plotting dates.](images/figures/fig-date-x-1.png){#fig-date-x width=100%}\n:::\n:::\n\n\n\n\nWe can use `scale_x_date()` to set the `date_breaks` to be \"1 month\" apart. The `date_labels` argument uses a code for different date formats; you can see the full list of possibilities in the help for `?strptime`. For example, `%b` means \"Abbreviated month name\", whilst if you wanted to use a format like \"2020/01/31\" you could try `\"%Y/%m/%d\"`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = lubridate::date(call_start), \n                        y = satisfaction)) +\n  geom_smooth(method = lm, formula = y~x) +\n  scale_x_date(name = \"\",\n               date_breaks = \"1 month\", \n               date_labels = \"%b\") +\n  scale_y_continuous(name = \"Caller Satisfaction\") +\n  ggtitle(\"2020 Caller Satisfaction\")\n```\n\n::: {.cell-output-display}\n![Plotting dates with breaks one month apart.](images/figures/fig-date-month-1.png){#fig-date-month width=100%}\n:::\n:::\n\n\n\n\n::: {.try}\nIt looks like customer satisfaction declined across the year, but is this change meaningful? See what the plot looks like when the y-axis spans the full range of possible satisfaction values from 1 to 5. You can also plot the individual data points to emphasise the range of values. \n\n\n\n\n::: {.cell webex.hide='true'}\n\n<div class='webex-solution'><button>Solution</button>\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = lubridate::date(call_start), \n                        y = satisfaction)) +\n  # show individual data, jitter the height to avoid overlap\n  geom_jitter(width = 0, height = .1, alpha = 0.2) + \n  geom_smooth(method = lm,  formula = y~x) +\n  scale_x_date(name = \"\",\n               date_breaks = \"1 month\", \n               date_labels = \"%b\") +\n  scale_y_continuous(name = \"Caller Satisfaction\",\n                     breaks = 1:5) +\n  coord_cartesian(ylim = c(1, 5)) + # changes limits\n  ggtitle(\"2020 Caller Satisfaction\")\n```\n\n::: {.cell-output-display}\n![](images/figures/unnamed-chunk-28-1.png){width=100%}\n:::\n\n\n</div>\n:::\n\n\n\n\n:::\n\n\n### Overplotting\n\nWhen you have a limited range of numeric values, such as an ordinal rating scale, sometimes overlapping data makes it difficult to see what is going on in a point plot. For example, the plot below shows satisfaction ratings by call time, but because all the ratings are 1, 2, 3, 4 or 5, it makes it hard to see exactly how many data points there are at each point.\n\nIn this section, we'll explore a few options for dealing with this.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = call_time, y = satisfaction)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![Overlapping data makes plots hard to understand.](images/figures/fig-over-plot-1.png){#fig-over-plot width=100%}\n:::\n:::\n\n\n\n\n#### Jitter plot\n\nYou can use `geom_jitter()` to move the points around a bit to make them easier to see. You can also set alpha transparency. Here, the x-axis is continuous, so there is no need to jitter the `width`, but the y-axis is ordinal categories, so the `height` is jittered between -0.2 and +0.2 away from the true y-value. \n\n::: {.try}\nChange these values to understand what jitter is doing\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = call_time, y = satisfaction)) +\n  geom_jitter(width = 0, height = .2, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![Jitter plot.](images/figures/fig-jitter-plot-1.png){#fig-jitter-plot width=100%}\n:::\n:::\n\n\n\n\n#### Facets\n\nAlternatively, you can use `facet_wrap()` to create a separate plot for each level of satisfaction. `facet_wrap()` uses the tilde (~) symbol, which you can roughly translate as \"by\", e.g., facet the plot *by* satisfaction rating. The `labeller` function controls the labels above each plot. `label_both` specifies that we want both the variable name (satisfaction) and the value (e.g., 1) printed on the plot to make it easier to read.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = call_time)) +\n  geom_histogram(binwidth = 10, \n                 boundary = 0, \n                 fill = \"dodgerblue\", \n                 color = \"black\") +\n  facet_wrap(~satisfaction, \n             ncol = 1, # try changing this to 2 \n             labeller = label_both) +\n  scale_x_continuous(name = \"Call Time (seconds)\",\n                     breaks = seq(0, 600, 30))\n```\n\n::: {.cell-output-display}\n![A histogram with facets.](images/figures/fig-fact-plot-1.png){#fig-fact-plot width=100%}\n:::\n:::\n\n\n\n\n::: {.callout-note}\n## More plots styles\n\nThese are not, by any means, all the plot types that you can make in R. This chapter just gave you a basic overview, and we will go into more detail in @sec-custom-viz). The [further resources](#resources-viz) section at the end of this chapter lists many resources, but the [R Graph Gallery](http://www.r-graph-gallery.com/) is especially useful to get inspiration for the kinds of beautiful plots you can make in R. \n:::\n\n## Exercises\n\nFor the final step in this chapter, we will create a report of data visualisations. You may need to refer back to @sec-reports) to help you complete these exercises and you may also want to take a break before you work through this section. We'd also recommend you <a href='https://psyteachr.github.io/glossary/r#render' target='_blank' class='glossary' title='To create a file (usually an image or PDF) or widget from source code'>render</a> at every step so that you can see how your output changes.\n\n### New Document\n\n* Create and save a new quarto document named `plots_report.qmd` \n* Give it the title \"Personality Data\". \n* Remove the default template text \n* Add the code below in the set-up code chunk:\n\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#‎| label: setup\n#‎| include: false\n\nlibrary(tidyverse) \nlibrary(patchwork) \nlibrary(ggthemes)  \n```\n````\n\n::: {.cell-output .cell-output-error}\n\n```\nError in library(ggthemes): there is no package called 'ggthemes'\n```\n\n\n:::\n\n````{.cell-code}\n```{{r}}\nlibrary(lubridate) \n\npersonality <- read_csv(\"https://psyteachr.github.io/reprores/data/personality_scores.csv\")\n```\n````\n:::\n\n\n\n\n### Summary\n\nCreate a level 2 heading titled \"Overview\". Underneath this heading, write a short summary of what the data set contains (scores on a 5-factor personality questionnaire) and what each of the variables means (you can use the information from the [personality_scores.json](https://psyteachr.github.io/reprores/data/personality_scores.json) codebook).\n\n### Appropriate plots\n\nCreate a visualisation with an appropriate plot style for each question below:\n\n* What does the distribution of scores look like for Agreeableness (`Ag`)?\n* Are Extraversion (`Ex`) and Openness (`Op`) correlated?\n* How many people completed the questionnaire each year? (hint: `year(date)`)\n\n### Combining plots\n\nDuplicate the code for your first plot and create the same for each of the five personality factors. Combine these 5 plots into a single figure.\n\n### Polishing plots\n\nFor each plot:\n\n* Create a level 2 heading in your quarto document and give it an informative title.\n* Write a short summary that interprets the data shown in the plots - it's not enough just to present visualisations, effective reports will also help the reader understand the conclusions they should draw from the plots you've presented.\n* Make sure each plot has a figure caption.\n* Organise your report so that the plots are shown **after** the text summary in each section.\n\n\n### Customising your report\n\n* Look through the different themes available with [<pkg>ggtheme</pkg>](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) and choose one to apply to all your plots.\n* Edit the YAML header of your quarto document so that your rendered report does not show any code, messages, or warnings.\n* Set the default figure size to 8 x 5.\n* Customise the figure size for your combined plot so it is readable\n* Add a table of contents\n\n### Inappropriate plots\n\nPick one plot above and make a new version:\n\n* Adjust the visual aesthetics to make it look as bad and as difficult to read as possible.\n* Save the plot as a PNG image\n* Post this plot to the week 3 thread on Teams and explain why it is so bad. Include the code in your post (see @sec-teams for advice on posting code on Teams)\n\n\n## Glossary {#sec-glossary-viz -}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|term                                            |definition                                                                                                                                                                           |\n|:-----------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|[argument](https://psyteachr.github.io/glossary/a#argument){target='_blank' class='glossary'}|A variable that provides input to a function.                                                                                                                                        |\n|[categorical](https://psyteachr.github.io/glossary/c#categorical){target='_blank' class='glossary'}|Data that can only take certain values, such as types of pet.                                                                                                                        |\n|[categorical](https://psyteachr.github.io/glossary/c#categorical){target='_blank' class='glossary'}|Data that can only take certain values, such as types of pet.                                                                                                                        |\n|[character](https://psyteachr.github.io/glossary/c#character){target='_blank' class='glossary'}|A data type representing strings of text.                                                                                                                                            |\n|[continuous](https://psyteachr.github.io/glossary/c#continuous){target='_blank' class='glossary'}|Data that can take on any values between other existing values.                                                                                                                      |\n|[continuous](https://psyteachr.github.io/glossary/c#continuous){target='_blank' class='glossary'}|Data that can take on any values between other existing values.                                                                                                                      |\n|[data-type](https://psyteachr.github.io/glossary/d#data-type){target='_blank' class='glossary'}|The kind of data represented by an object.                                                                                                                                           |\n|[default-value](https://psyteachr.github.io/glossary/d#default-value){target='_blank' class='glossary'}|A value that a function uses for an argument if it is skipped.                                                                                                                       |\n|[double](https://psyteachr.github.io/glossary/d#double){target='_blank' class='glossary'}|A data type representing a real decimal number                                                                                                                                       |\n|[factor](https://psyteachr.github.io/glossary/f#factor){target='_blank' class='glossary'}|A data type where a specific set of values are stored with labels; An explanatory variable manipulated by the experimenter                                                           |\n|[geom](https://psyteachr.github.io/glossary/g#geom){target='_blank' class='glossary'}|The geometric style in which data are displayed, such as boxplot, density, or histogram.                                                                                             |\n|[integer](https://psyteachr.github.io/glossary/i#integer){target='_blank' class='glossary'}|A data type representing whole numbers.                                                                                                                                              |\n|[likert](https://psyteachr.github.io/glossary/l#likert){target='_blank' class='glossary'}|A rating scale with a small number of discrete points in order                                                                                                                       |\n|[logical](https://psyteachr.github.io/glossary/l#logical){target='_blank' class='glossary'}|A data type representing TRUE or FALSE values.                                                                                                                                       |\n|[median](https://psyteachr.github.io/glossary/m#median){target='_blank' class='glossary'}|The middle number in a distribution where half of the values are larger and half are smaller.                                                                                        |\n|[nominal](https://psyteachr.github.io/glossary/n#nominal){target='_blank' class='glossary'}|Categorical variables that don&#39;t have an inherent order, such as types of animal.                                                                                                |\n|[numeric](https://psyteachr.github.io/glossary/n#numeric){target='_blank' class='glossary'}|A data type representing a real decimal number or integer.                                                                                                                           |\n|[observation](https://psyteachr.github.io/glossary/o#observation){target='_blank' class='glossary'}|All of the data about a single trial or question.                                                                                                                                    |\n|[ordinal](https://psyteachr.github.io/glossary/o#ordinal){target='_blank' class='glossary'}|Discrete variables that have an inherent order, such as level of education or dislike/like.                                                                                          |\n|[outlier](https://psyteachr.github.io/glossary/o#outlier){target='_blank' class='glossary'}|A data point that is extremely distant from most of the other data points                                                                                                            |\n|[render](https://psyteachr.github.io/glossary/r#render){target='_blank' class='glossary'}|To create a file (usually an image or PDF) or widget from source code                                                                                                                |\n|[string](https://psyteachr.github.io/glossary/s#string){target='_blank' class='glossary'}|A piece of text inside of quotes.                                                                                                                                                    |\n|[tidy-data](https://psyteachr.github.io/glossary/t#tidy-data){target='_blank' class='glossary'}|A format for data that maps the meaning onto the structure.                                                                                                                          |\n|[value](https://psyteachr.github.io/glossary/v#value){target='_blank' class='glossary'}|A single number or piece of data.                                                                                                                                                    |\n|[variable](https://psyteachr.github.io/glossary/v#variable){target='_blank' class='glossary'}|(coding): A word that identifies and stores the value of some data for later use; (stats): An attribute or characteristic of an observation that you can measure, count, or describe |\n|[vector](https://psyteachr.github.io/glossary/v#vector){target='_blank' class='glossary'}|A type of data structure that collects values with the same data type, like T/F values, numbers, or strings.                                                                         |\n\n\n:::\n:::\n\n\n\n\n\n## Further Resources {#sec-resources-viz -}\n\n* [ggplot2 cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)\n* [Data visualisation using R, for researchers who don't use R](https://psyteachr.github.io/introdataviz/) [@nordmann_2021]\n* [Chapter 1: Data Visualisation](https://r4ds.hadley.nz/data-visualize) of *R for Data Science*\n* [ggplot2 FAQs](https://ggplot2.tidyverse.org/articles/)\n* [ggplot2 documentation](https://ggplot2.tidyverse.org/reference/)\n* [Hack Your Data Beautiful](https://psyteachr.github.io/hack-your-data/) workshop by University of Glasgow postgraduate students\n* [Chapter 28: Graphics for communication](http://r4ds.had.co.nz/graphics-for-communication.html) of *R for Data Science*\n* [gganimate](https://gganimate.com/): A package for making animated plots\n\n## References {-}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}